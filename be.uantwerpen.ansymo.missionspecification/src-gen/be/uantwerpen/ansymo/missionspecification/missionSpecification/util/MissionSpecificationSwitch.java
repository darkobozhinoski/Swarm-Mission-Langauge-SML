/**
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.missionSpecification.util;

import be.uantwerpen.ansymo.missionspecification.missionSpecification.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecificationPackage
 * @generated
 */
public class MissionSpecificationSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MissionSpecificationPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MissionSpecificationSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MissionSpecificationPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MissionSpecificationPackage.MISSION_SPECIFICATION:
      {
        MissionSpecification missionSpecification = (MissionSpecification)theEObject;
        T result = caseMissionSpecification(missionSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.PROPERTY:
      {
        Property property = (Property)theEObject;
        T result = caseProperty(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.SCOPE:
      {
        Scope scope = (Scope)theEObject;
        T result = caseScope(scope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.OCCURENCE:
      {
        Occurence occurence = (Occurence)theEObject;
        T result = caseOccurence(occurence);
        if (result == null) result = casePattern(occurence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.UNIVERSALITY:
      {
        Universality universality = (Universality)theEObject;
        T result = caseUniversality(universality);
        if (result == null) result = caseOccurence(universality);
        if (result == null) result = casePattern(universality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ABSENCE:
      {
        Absence absence = (Absence)theEObject;
        T result = caseAbsence(absence);
        if (result == null) result = caseOccurence(absence);
        if (result == null) result = casePattern(absence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.EXISTENCE:
      {
        Existence existence = (Existence)theEObject;
        T result = caseExistence(existence);
        if (result == null) result = caseOccurence(existence);
        if (result == null) result = casePattern(existence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.BOUNDED_EXISTENCE:
      {
        BoundedExistence boundedExistence = (BoundedExistence)theEObject;
        T result = caseBoundedExistence(boundedExistence);
        if (result == null) result = caseOccurence(boundedExistence);
        if (result == null) result = casePattern(boundedExistence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ORDER:
      {
        Order order = (Order)theEObject;
        T result = caseOrder(order);
        if (result == null) result = casePattern(order);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.PRECEDENCE:
      {
        Precedence precedence = (Precedence)theEObject;
        T result = casePrecedence(precedence);
        if (result == null) result = caseOrder(precedence);
        if (result == null) result = casePattern(precedence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.RESPONSE:
      {
        Response response = (Response)theEObject;
        T result = caseResponse(response);
        if (result == null) result = caseOrder(response);
        if (result == null) result = casePattern(response);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.PROPOSITION:
      {
        Proposition proposition = (Proposition)theEObject;
        T result = caseProposition(proposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ATOMIC_PROPOSITION:
      {
        AtomicProposition atomicProposition = (AtomicProposition)theEObject;
        T result = caseAtomicProposition(atomicProposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.BOOLEAN_EXPRESSION:
      {
        BooleanExpression booleanExpression = (BooleanExpression)theEObject;
        T result = caseBooleanExpression(booleanExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.BINARY_EXPRESSION:
      {
        BinaryExpression binaryExpression = (BinaryExpression)theEObject;
        T result = caseBinaryExpression(binaryExpression);
        if (result == null) result = caseBooleanExpression(binaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.UNARY_EXPRESSION:
      {
        UnaryExpression unaryExpression = (UnaryExpression)theEObject;
        T result = caseUnaryExpression(unaryExpression);
        if (result == null) result = caseBooleanExpression(unaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.INSTANCE:
      {
        Instance instance = (Instance)theEObject;
        T result = caseInstance(instance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.INSTANCE_DECL:
      {
        InstanceDecl instanceDecl = (InstanceDecl)theEObject;
        T result = caseInstanceDecl(instanceDecl);
        if (result == null) result = caseInstance(instanceDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.INSTANCE_REF:
      {
        InstanceRef instanceRef = (InstanceRef)theEObject;
        T result = caseInstanceRef(instanceRef);
        if (result == null) result = caseInstance(instanceRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ASSOCIATION:
      {
        Association association = (Association)theEObject;
        T result = caseAssociation(association);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ARITHMETIC_EXPRESSION:
      {
        ArithmeticExpression arithmeticExpression = (ArithmeticExpression)theEObject;
        T result = caseArithmeticExpression(arithmeticExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.INT_LITERAL:
      {
        IntLiteral intLiteral = (IntLiteral)theEObject;
        T result = caseIntLiteral(intLiteral);
        if (result == null) result = caseArithmeticExpression(intLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.REAL_LITERAL:
      {
        RealLiteral realLiteral = (RealLiteral)theEObject;
        T result = caseRealLiteral(realLiteral);
        if (result == null) result = caseArithmeticExpression(realLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseArithmeticExpression(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.BOOL_LITERAL:
      {
        BoolLiteral boolLiteral = (BoolLiteral)theEObject;
        T result = caseBoolLiteral(boolLiteral);
        if (result == null) result = caseArithmeticExpression(boolLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.GLOBAL_SCOPE:
      {
        GlobalScope globalScope = (GlobalScope)theEObject;
        T result = caseGlobalScope(globalScope);
        if (result == null) result = caseScope(globalScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.BEFORE_SCOPE:
      {
        BeforeScope beforeScope = (BeforeScope)theEObject;
        T result = caseBeforeScope(beforeScope);
        if (result == null) result = caseScope(beforeScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.AFTER_SCOPE:
      {
        AfterScope afterScope = (AfterScope)theEObject;
        T result = caseAfterScope(afterScope);
        if (result == null) result = caseScope(afterScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.BETWEEN_SCOPE:
      {
        BetweenScope betweenScope = (BetweenScope)theEObject;
        T result = caseBetweenScope(betweenScope);
        if (result == null) result = caseScope(betweenScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.AFTER_UNTIL_SCOPE:
      {
        AfterUntilScope afterUntilScope = (AfterUntilScope)theEObject;
        T result = caseAfterUntilScope(afterUntilScope);
        if (result == null) result = caseScope(afterUntilScope);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.MOCK_PROPOSITION:
      {
        MockProposition mockProposition = (MockProposition)theEObject;
        T result = caseMockProposition(mockProposition);
        if (result == null) result = caseProposition(mockProposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = caseBooleanExpression(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.EQUALS_CONDITION:
      {
        EqualsCondition equalsCondition = (EqualsCondition)theEObject;
        T result = caseEqualsCondition(equalsCondition);
        if (result == null) result = caseBinaryExpression(equalsCondition);
        if (result == null) result = caseBooleanExpression(equalsCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.LESS_THAN_CONDITION:
      {
        LessThanCondition lessThanCondition = (LessThanCondition)theEObject;
        T result = caseLessThanCondition(lessThanCondition);
        if (result == null) result = caseBinaryExpression(lessThanCondition);
        if (result == null) result = caseBooleanExpression(lessThanCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.GREATER_THAN_CONDITION:
      {
        GreaterThanCondition greaterThanCondition = (GreaterThanCondition)theEObject;
        T result = caseGreaterThanCondition(greaterThanCondition);
        if (result == null) result = caseBinaryExpression(greaterThanCondition);
        if (result == null) result = caseBooleanExpression(greaterThanCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.NOT_CONDITION:
      {
        NotCondition notCondition = (NotCondition)theEObject;
        T result = caseNotCondition(notCondition);
        if (result == null) result = caseUnaryExpression(notCondition);
        if (result == null) result = caseBooleanExpression(notCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.TASKS_ASSOCIATION:
      {
        TasksAssociation tasksAssociation = (TasksAssociation)theEObject;
        T result = caseTasksAssociation(tasksAssociation);
        if (result == null) result = caseAssociation(tasksAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.TEAM_ASSOCIATION:
      {
        TeamAssociation teamAssociation = (TeamAssociation)theEObject;
        T result = caseTeamAssociation(teamAssociation);
        if (result == null) result = caseAssociation(teamAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.ROBOTS_ASSOCIATION:
      {
        RobotsAssociation robotsAssociation = (RobotsAssociation)theEObject;
        T result = caseRobotsAssociation(robotsAssociation);
        if (result == null) result = caseAssociation(robotsAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.CURRENT_TASK_ASSOCIATION:
      {
        CurrentTaskAssociation currentTaskAssociation = (CurrentTaskAssociation)theEObject;
        T result = caseCurrentTaskAssociation(currentTaskAssociation);
        if (result == null) result = caseAssociation(currentTaskAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.COVERED_TASKS_ASSOCIATION:
      {
        CoveredTasksAssociation coveredTasksAssociation = (CoveredTasksAssociation)theEObject;
        T result = caseCoveredTasksAssociation(coveredTasksAssociation);
        if (result == null) result = caseAssociation(coveredTasksAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.TODO_TASKS_ASSOCIATION:
      {
        TodoTasksAssociation todoTasksAssociation = (TodoTasksAssociation)theEObject;
        T result = caseTodoTasksAssociation(todoTasksAssociation);
        if (result == null) result = caseAssociation(todoTasksAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.FINISHED_TASKS_ASSOCIATION:
      {
        FinishedTasksAssociation finishedTasksAssociation = (FinishedTasksAssociation)theEObject;
        T result = caseFinishedTasksAssociation(finishedTasksAssociation);
        if (result == null) result = caseAssociation(finishedTasksAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.PERFORMING_ACTION_ASSOCIATION:
      {
        PerformingActionAssociation performingActionAssociation = (PerformingActionAssociation)theEObject;
        T result = casePerformingActionAssociation(performingActionAssociation);
        if (result == null) result = caseAssociation(performingActionAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.IN_ASSOCIATION:
      {
        InAssociation inAssociation = (InAssociation)theEObject;
        T result = caseInAssociation(inAssociation);
        if (result == null) result = caseAssociation(inAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.CURRENT_POSITION_ASSOCIATION:
      {
        CurrentPositionAssociation currentPositionAssociation = (CurrentPositionAssociation)theEObject;
        T result = caseCurrentPositionAssociation(currentPositionAssociation);
        if (result == null) result = caseAssociation(currentPositionAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.HOME_ASSOCIATION:
      {
        HomeAssociation homeAssociation = (HomeAssociation)theEObject;
        T result = caseHomeAssociation(homeAssociation);
        if (result == null) result = caseAssociation(homeAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.TASK_AREA_ASSOCIATION:
      {
        TaskAreaAssociation taskAreaAssociation = (TaskAreaAssociation)theEObject;
        T result = caseTaskAreaAssociation(taskAreaAssociation);
        if (result == null) result = caseAssociation(taskAreaAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.COVERED_POINTS_ASSOCIATION:
      {
        CoveredPointsAssociation coveredPointsAssociation = (CoveredPointsAssociation)theEObject;
        T result = caseCoveredPointsAssociation(coveredPointsAssociation);
        if (result == null) result = caseAssociation(coveredPointsAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.TODO_POINTS_ASSOCIATION:
      {
        TodoPointsAssociation todoPointsAssociation = (TodoPointsAssociation)theEObject;
        T result = caseTodoPointsAssociation(todoPointsAssociation);
        if (result == null) result = caseAssociation(todoPointsAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.FINISHED_POINTS_ASSOCIATION:
      {
        FinishedPointsAssociation finishedPointsAssociation = (FinishedPointsAssociation)theEObject;
        T result = caseFinishedPointsAssociation(finishedPointsAssociation);
        if (result == null) result = caseAssociation(finishedPointsAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.POINTS_ASSOCIATION:
      {
        PointsAssociation pointsAssociation = (PointsAssociation)theEObject;
        T result = casePointsAssociation(pointsAssociation);
        if (result == null) result = caseAssociation(pointsAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.INITIAL_POSITION_ASSOCIATION:
      {
        InitialPositionAssociation initialPositionAssociation = (InitialPositionAssociation)theEObject;
        T result = caseInitialPositionAssociation(initialPositionAssociation);
        if (result == null) result = caseAssociation(initialPositionAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MissionSpecificationPackage.REFERENCE_ASSOCIATION:
      {
        ReferenceAssociation referenceAssociation = (ReferenceAssociation)theEObject;
        T result = caseReferenceAssociation(referenceAssociation);
        if (result == null) result = caseAssociation(referenceAssociation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mission Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mission Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMissionSpecification(MissionSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperty(Property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScope(Scope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Occurence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Occurence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOccurence(Occurence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Universality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Universality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniversality(Universality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Absence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Absence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbsence(Absence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistence(Existence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bounded Existence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bounded Existence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundedExistence(BoundedExistence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Order</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Order</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrder(Order object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Precedence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Precedence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrecedence(Precedence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Response</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Response</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResponse(Response object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proposition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proposition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProposition(Proposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Proposition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Proposition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicProposition(AtomicProposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExpression(BooleanExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryExpression(BinaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryExpression(UnaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstance(Instance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceDecl(InstanceDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceRef(InstanceRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssociation(Association object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpression(ArithmeticExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntLiteral(IntLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealLiteral(RealLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolLiteral(BoolLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobalScope(GlobalScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Before Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Before Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBeforeScope(BeforeScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>After Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>After Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAfterScope(AfterScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Between Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Between Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBetweenScope(BetweenScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>After Until Scope</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>After Until Scope</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAfterUntilScope(AfterUntilScope object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mock Proposition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mock Proposition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMockProposition(MockProposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equals Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equals Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualsCondition(EqualsCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Less Than Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Less Than Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLessThanCondition(LessThanCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Greater Than Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Greater Than Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGreaterThanCondition(GreaterThanCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotCondition(NotCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tasks Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tasks Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTasksAssociation(TasksAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Team Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Team Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTeamAssociation(TeamAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Robots Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Robots Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRobotsAssociation(RobotsAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Task Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Task Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentTaskAssociation(CurrentTaskAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Covered Tasks Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Covered Tasks Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoveredTasksAssociation(CoveredTasksAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Todo Tasks Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Todo Tasks Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTodoTasksAssociation(TodoTasksAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Finished Tasks Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Finished Tasks Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFinishedTasksAssociation(FinishedTasksAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Performing Action Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Performing Action Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePerformingActionAssociation(PerformingActionAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInAssociation(InAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Position Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Position Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentPositionAssociation(CurrentPositionAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Home Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Home Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHomeAssociation(HomeAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task Area Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task Area Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaskAreaAssociation(TaskAreaAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Covered Points Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Covered Points Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoveredPointsAssociation(CoveredPointsAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Todo Points Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Todo Points Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTodoPointsAssociation(TodoPointsAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Finished Points Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Finished Points Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFinishedPointsAssociation(FinishedPointsAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Points Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Points Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointsAssociation(PointsAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Position Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Position Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialPositionAssociation(InitialPositionAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceAssociation(ReferenceAssociation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MissionSpecificationSwitch
