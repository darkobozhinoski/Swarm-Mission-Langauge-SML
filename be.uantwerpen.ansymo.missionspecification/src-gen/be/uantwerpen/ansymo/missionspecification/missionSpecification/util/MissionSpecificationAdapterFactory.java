/**
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.missionSpecification.util;

import be.uantwerpen.ansymo.missionspecification.missionSpecification.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecificationPackage
 * @generated
 */
public class MissionSpecificationAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MissionSpecificationPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MissionSpecificationAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MissionSpecificationPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MissionSpecificationSwitch<Adapter> modelSwitch =
    new MissionSpecificationSwitch<Adapter>()
    {
      @Override
      public Adapter caseMissionSpecification(MissionSpecification object)
      {
        return createMissionSpecificationAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseScope(Scope object)
      {
        return createScopeAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter caseOccurence(Occurence object)
      {
        return createOccurenceAdapter();
      }
      @Override
      public Adapter caseUniversality(Universality object)
      {
        return createUniversalityAdapter();
      }
      @Override
      public Adapter caseAbsence(Absence object)
      {
        return createAbsenceAdapter();
      }
      @Override
      public Adapter caseExistence(Existence object)
      {
        return createExistenceAdapter();
      }
      @Override
      public Adapter caseBoundedExistence(BoundedExistence object)
      {
        return createBoundedExistenceAdapter();
      }
      @Override
      public Adapter caseOrder(Order object)
      {
        return createOrderAdapter();
      }
      @Override
      public Adapter casePrecedence(Precedence object)
      {
        return createPrecedenceAdapter();
      }
      @Override
      public Adapter caseResponse(Response object)
      {
        return createResponseAdapter();
      }
      @Override
      public Adapter caseProposition(Proposition object)
      {
        return createPropositionAdapter();
      }
      @Override
      public Adapter caseAtomicProposition(AtomicProposition object)
      {
        return createAtomicPropositionAdapter();
      }
      @Override
      public Adapter caseBooleanExpression(BooleanExpression object)
      {
        return createBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseBinaryExpression(BinaryExpression object)
      {
        return createBinaryExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryExpression(UnaryExpression object)
      {
        return createUnaryExpressionAdapter();
      }
      @Override
      public Adapter caseInstance(Instance object)
      {
        return createInstanceAdapter();
      }
      @Override
      public Adapter caseInstanceDecl(InstanceDecl object)
      {
        return createInstanceDeclAdapter();
      }
      @Override
      public Adapter caseInstanceRef(InstanceRef object)
      {
        return createInstanceRefAdapter();
      }
      @Override
      public Adapter caseAssociation(Association object)
      {
        return createAssociationAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseArithmeticExpression(ArithmeticExpression object)
      {
        return createArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseRealLiteral(RealLiteral object)
      {
        return createRealLiteralAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseBoolLiteral(BoolLiteral object)
      {
        return createBoolLiteralAdapter();
      }
      @Override
      public Adapter caseGlobalScope(GlobalScope object)
      {
        return createGlobalScopeAdapter();
      }
      @Override
      public Adapter caseBeforeScope(BeforeScope object)
      {
        return createBeforeScopeAdapter();
      }
      @Override
      public Adapter caseAfterScope(AfterScope object)
      {
        return createAfterScopeAdapter();
      }
      @Override
      public Adapter caseBetweenScope(BetweenScope object)
      {
        return createBetweenScopeAdapter();
      }
      @Override
      public Adapter caseAfterUntilScope(AfterUntilScope object)
      {
        return createAfterUntilScopeAdapter();
      }
      @Override
      public Adapter caseMockProposition(MockProposition object)
      {
        return createMockPropositionAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseEqualsCondition(EqualsCondition object)
      {
        return createEqualsConditionAdapter();
      }
      @Override
      public Adapter caseLessThanCondition(LessThanCondition object)
      {
        return createLessThanConditionAdapter();
      }
      @Override
      public Adapter caseGreaterThanCondition(GreaterThanCondition object)
      {
        return createGreaterThanConditionAdapter();
      }
      @Override
      public Adapter caseNotCondition(NotCondition object)
      {
        return createNotConditionAdapter();
      }
      @Override
      public Adapter caseTasksAssociation(TasksAssociation object)
      {
        return createTasksAssociationAdapter();
      }
      @Override
      public Adapter caseTeamAssociation(TeamAssociation object)
      {
        return createTeamAssociationAdapter();
      }
      @Override
      public Adapter caseRobotsAssociation(RobotsAssociation object)
      {
        return createRobotsAssociationAdapter();
      }
      @Override
      public Adapter caseCurrentTaskAssociation(CurrentTaskAssociation object)
      {
        return createCurrentTaskAssociationAdapter();
      }
      @Override
      public Adapter caseCoveredTasksAssociation(CoveredTasksAssociation object)
      {
        return createCoveredTasksAssociationAdapter();
      }
      @Override
      public Adapter caseTodoTasksAssociation(TodoTasksAssociation object)
      {
        return createTodoTasksAssociationAdapter();
      }
      @Override
      public Adapter caseFinishedTasksAssociation(FinishedTasksAssociation object)
      {
        return createFinishedTasksAssociationAdapter();
      }
      @Override
      public Adapter casePerformingActionAssociation(PerformingActionAssociation object)
      {
        return createPerformingActionAssociationAdapter();
      }
      @Override
      public Adapter caseInAssociation(InAssociation object)
      {
        return createInAssociationAdapter();
      }
      @Override
      public Adapter caseCurrentPositionAssociation(CurrentPositionAssociation object)
      {
        return createCurrentPositionAssociationAdapter();
      }
      @Override
      public Adapter caseHomeAssociation(HomeAssociation object)
      {
        return createHomeAssociationAdapter();
      }
      @Override
      public Adapter caseTaskAreaAssociation(TaskAreaAssociation object)
      {
        return createTaskAreaAssociationAdapter();
      }
      @Override
      public Adapter caseCoveredPointsAssociation(CoveredPointsAssociation object)
      {
        return createCoveredPointsAssociationAdapter();
      }
      @Override
      public Adapter caseTodoPointsAssociation(TodoPointsAssociation object)
      {
        return createTodoPointsAssociationAdapter();
      }
      @Override
      public Adapter caseFinishedPointsAssociation(FinishedPointsAssociation object)
      {
        return createFinishedPointsAssociationAdapter();
      }
      @Override
      public Adapter casePointsAssociation(PointsAssociation object)
      {
        return createPointsAssociationAdapter();
      }
      @Override
      public Adapter caseInitialPositionAssociation(InitialPositionAssociation object)
      {
        return createInitialPositionAssociationAdapter();
      }
      @Override
      public Adapter caseReferenceAssociation(ReferenceAssociation object)
      {
        return createReferenceAssociationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecification <em>Mission Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecification
   * @generated
   */
  public Adapter createMissionSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Scope <em>Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Scope
   * @generated
   */
  public Adapter createScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Occurence <em>Occurence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Occurence
   * @generated
   */
  public Adapter createOccurenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Universality <em>Universality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Universality
   * @generated
   */
  public Adapter createUniversalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Absence <em>Absence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Absence
   * @generated
   */
  public Adapter createAbsenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Existence <em>Existence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Existence
   * @generated
   */
  public Adapter createExistenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.BoundedExistence <em>Bounded Existence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.BoundedExistence
   * @generated
   */
  public Adapter createBoundedExistenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Order <em>Order</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Order
   * @generated
   */
  public Adapter createOrderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Precedence <em>Precedence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Precedence
   * @generated
   */
  public Adapter createPrecedenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Response <em>Response</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Response
   * @generated
   */
  public Adapter createResponseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Proposition <em>Proposition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Proposition
   * @generated
   */
  public Adapter createPropositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.AtomicProposition <em>Atomic Proposition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.AtomicProposition
   * @generated
   */
  public Adapter createAtomicPropositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.BooleanExpression <em>Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.BooleanExpression
   * @generated
   */
  public Adapter createBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.BinaryExpression <em>Binary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.BinaryExpression
   * @generated
   */
  public Adapter createBinaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.UnaryExpression <em>Unary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.UnaryExpression
   * @generated
   */
  public Adapter createUnaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Instance <em>Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Instance
   * @generated
   */
  public Adapter createInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.InstanceDecl <em>Instance Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.InstanceDecl
   * @generated
   */
  public Adapter createInstanceDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.InstanceRef <em>Instance Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.InstanceRef
   * @generated
   */
  public Adapter createInstanceRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Association <em>Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Association
   * @generated
   */
  public Adapter createAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.ArithmeticExpression <em>Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.ArithmeticExpression
   * @generated
   */
  public Adapter createArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.RealLiteral <em>Real Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.RealLiteral
   * @generated
   */
  public Adapter createRealLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.BoolLiteral <em>Bool Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.BoolLiteral
   * @generated
   */
  public Adapter createBoolLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.GlobalScope <em>Global Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.GlobalScope
   * @generated
   */
  public Adapter createGlobalScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.BeforeScope <em>Before Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.BeforeScope
   * @generated
   */
  public Adapter createBeforeScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.AfterScope <em>After Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.AfterScope
   * @generated
   */
  public Adapter createAfterScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.BetweenScope <em>Between Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.BetweenScope
   * @generated
   */
  public Adapter createBetweenScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.AfterUntilScope <em>After Until Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.AfterUntilScope
   * @generated
   */
  public Adapter createAfterUntilScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.MockProposition <em>Mock Proposition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.MockProposition
   * @generated
   */
  public Adapter createMockPropositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.EqualsCondition <em>Equals Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.EqualsCondition
   * @generated
   */
  public Adapter createEqualsConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.LessThanCondition <em>Less Than Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.LessThanCondition
   * @generated
   */
  public Adapter createLessThanConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.GreaterThanCondition <em>Greater Than Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.GreaterThanCondition
   * @generated
   */
  public Adapter createGreaterThanConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.NotCondition <em>Not Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.NotCondition
   * @generated
   */
  public Adapter createNotConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.TasksAssociation <em>Tasks Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.TasksAssociation
   * @generated
   */
  public Adapter createTasksAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.TeamAssociation <em>Team Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.TeamAssociation
   * @generated
   */
  public Adapter createTeamAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.RobotsAssociation <em>Robots Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.RobotsAssociation
   * @generated
   */
  public Adapter createRobotsAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.CurrentTaskAssociation <em>Current Task Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.CurrentTaskAssociation
   * @generated
   */
  public Adapter createCurrentTaskAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.CoveredTasksAssociation <em>Covered Tasks Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.CoveredTasksAssociation
   * @generated
   */
  public Adapter createCoveredTasksAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.TodoTasksAssociation <em>Todo Tasks Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.TodoTasksAssociation
   * @generated
   */
  public Adapter createTodoTasksAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.FinishedTasksAssociation <em>Finished Tasks Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.FinishedTasksAssociation
   * @generated
   */
  public Adapter createFinishedTasksAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.PerformingActionAssociation <em>Performing Action Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.PerformingActionAssociation
   * @generated
   */
  public Adapter createPerformingActionAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.InAssociation <em>In Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.InAssociation
   * @generated
   */
  public Adapter createInAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.CurrentPositionAssociation <em>Current Position Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.CurrentPositionAssociation
   * @generated
   */
  public Adapter createCurrentPositionAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.HomeAssociation <em>Home Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.HomeAssociation
   * @generated
   */
  public Adapter createHomeAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.TaskAreaAssociation <em>Task Area Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.TaskAreaAssociation
   * @generated
   */
  public Adapter createTaskAreaAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.CoveredPointsAssociation <em>Covered Points Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.CoveredPointsAssociation
   * @generated
   */
  public Adapter createCoveredPointsAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.TodoPointsAssociation <em>Todo Points Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.TodoPointsAssociation
   * @generated
   */
  public Adapter createTodoPointsAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.FinishedPointsAssociation <em>Finished Points Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.FinishedPointsAssociation
   * @generated
   */
  public Adapter createFinishedPointsAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.PointsAssociation <em>Points Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.PointsAssociation
   * @generated
   */
  public Adapter createPointsAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.InitialPositionAssociation <em>Initial Position Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.InitialPositionAssociation
   * @generated
   */
  public Adapter createInitialPositionAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.ReferenceAssociation <em>Reference Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.ReferenceAssociation
   * @generated
   */
  public Adapter createReferenceAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MissionSpecificationAdapterFactory
