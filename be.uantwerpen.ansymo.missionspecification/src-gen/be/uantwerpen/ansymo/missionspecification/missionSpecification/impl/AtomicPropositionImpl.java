/**
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.missionSpecification.impl;

import be.uantwerpen.ansymo.missionspecification.missionSpecification.Association;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.AtomicProposition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BooleanExpression;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Instance;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecificationPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Atomic Proposition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.impl.AtomicPropositionImpl#getInst <em>Inst</em>}</li>
 *   <li>{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.impl.AtomicPropositionImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.impl.AtomicPropositionImpl#getAssoc <em>Assoc</em>}</li>
 *   <li>{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.impl.AtomicPropositionImpl#getInst2 <em>Inst2</em>}</li>
 *   <li>{@link be.uantwerpen.ansymo.missionspecification.missionSpecification.impl.AtomicPropositionImpl#getCond2 <em>Cond2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AtomicPropositionImpl extends MinimalEObjectImpl.Container implements AtomicProposition
{
  /**
   * The cached value of the '{@link #getInst() <em>Inst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInst()
   * @generated
   * @ordered
   */
  protected Instance inst;

  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected EList<BooleanExpression> cond;

  /**
   * The cached value of the '{@link #getAssoc() <em>Assoc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssoc()
   * @generated
   * @ordered
   */
  protected Association assoc;

  /**
   * The cached value of the '{@link #getInst2() <em>Inst2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInst2()
   * @generated
   * @ordered
   */
  protected Instance inst2;

  /**
   * The cached value of the '{@link #getCond2() <em>Cond2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond2()
   * @generated
   * @ordered
   */
  protected EList<BooleanExpression> cond2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AtomicPropositionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MissionSpecificationPackage.Literals.ATOMIC_PROPOSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance getInst()
  {
    return inst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInst(Instance newInst, NotificationChain msgs)
  {
    Instance oldInst = inst;
    inst = newInst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MissionSpecificationPackage.ATOMIC_PROPOSITION__INST, oldInst, newInst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInst(Instance newInst)
  {
    if (newInst != inst)
    {
      NotificationChain msgs = null;
      if (inst != null)
        msgs = ((InternalEObject)inst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MissionSpecificationPackage.ATOMIC_PROPOSITION__INST, null, msgs);
      if (newInst != null)
        msgs = ((InternalEObject)newInst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MissionSpecificationPackage.ATOMIC_PROPOSITION__INST, null, msgs);
      msgs = basicSetInst(newInst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MissionSpecificationPackage.ATOMIC_PROPOSITION__INST, newInst, newInst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BooleanExpression> getCond()
  {
    if (cond == null)
    {
      cond = new EObjectContainmentEList<BooleanExpression>(BooleanExpression.class, this, MissionSpecificationPackage.ATOMIC_PROPOSITION__COND);
    }
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Association getAssoc()
  {
    return assoc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssoc(Association newAssoc, NotificationChain msgs)
  {
    Association oldAssoc = assoc;
    assoc = newAssoc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC, oldAssoc, newAssoc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssoc(Association newAssoc)
  {
    if (newAssoc != assoc)
    {
      NotificationChain msgs = null;
      if (assoc != null)
        msgs = ((InternalEObject)assoc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC, null, msgs);
      if (newAssoc != null)
        msgs = ((InternalEObject)newAssoc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC, null, msgs);
      msgs = basicSetAssoc(newAssoc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC, newAssoc, newAssoc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instance getInst2()
  {
    return inst2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInst2(Instance newInst2, NotificationChain msgs)
  {
    Instance oldInst2 = inst2;
    inst2 = newInst2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2, oldInst2, newInst2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInst2(Instance newInst2)
  {
    if (newInst2 != inst2)
    {
      NotificationChain msgs = null;
      if (inst2 != null)
        msgs = ((InternalEObject)inst2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2, null, msgs);
      if (newInst2 != null)
        msgs = ((InternalEObject)newInst2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2, null, msgs);
      msgs = basicSetInst2(newInst2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2, newInst2, newInst2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BooleanExpression> getCond2()
  {
    if (cond2 == null)
    {
      cond2 = new EObjectContainmentEList<BooleanExpression>(BooleanExpression.class, this, MissionSpecificationPackage.ATOMIC_PROPOSITION__COND2);
    }
    return cond2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST:
        return basicSetInst(null, msgs);
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND:
        return ((InternalEList<?>)getCond()).basicRemove(otherEnd, msgs);
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC:
        return basicSetAssoc(null, msgs);
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2:
        return basicSetInst2(null, msgs);
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND2:
        return ((InternalEList<?>)getCond2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST:
        return getInst();
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND:
        return getCond();
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC:
        return getAssoc();
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2:
        return getInst2();
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND2:
        return getCond2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST:
        setInst((Instance)newValue);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND:
        getCond().clear();
        getCond().addAll((Collection<? extends BooleanExpression>)newValue);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC:
        setAssoc((Association)newValue);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2:
        setInst2((Instance)newValue);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND2:
        getCond2().clear();
        getCond2().addAll((Collection<? extends BooleanExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST:
        setInst((Instance)null);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND:
        getCond().clear();
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC:
        setAssoc((Association)null);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2:
        setInst2((Instance)null);
        return;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND2:
        getCond2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST:
        return inst != null;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND:
        return cond != null && !cond.isEmpty();
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__ASSOC:
        return assoc != null;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__INST2:
        return inst2 != null;
      case MissionSpecificationPackage.ATOMIC_PROPOSITION__COND2:
        return cond2 != null && !cond2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AtomicPropositionImpl
