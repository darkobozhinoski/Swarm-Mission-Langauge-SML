/**
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.missionSpecification.impl;

import be.uantwerpen.ansymo.missionspecification.missionSpecification.Absence;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.AfterScope;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.AfterUntilScope;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.ArithmeticExpression;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Association;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.AtomicProposition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Attribute;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BeforeScope;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BetweenScope;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BinaryExpression;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BoolLiteral;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BooleanExpression;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.BoundedExistence;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Condition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.CoveredPointsAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.CoveredTasksAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.CurrentPositionAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.CurrentTaskAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.EqualsCondition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Existence;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.FinishedPointsAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.FinishedTasksAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.GlobalScope;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.GreaterThanCondition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.HomeAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.InAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.InitialPositionAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Instance;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.InstanceDecl;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.InstanceRef;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.IntLiteral;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.LessThanCondition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecification;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecificationFactory;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecificationPackage;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.MockProposition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.NotCondition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Occurence;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Order;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Pattern;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.PerformingActionAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.PointsAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Precedence;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Property;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Proposition;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.RealLiteral;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.ReferenceAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Response;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.RobotsAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Scope;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.StringLiteral;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.TaskAreaAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.TasksAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.TeamAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.TodoPointsAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.TodoTasksAssociation;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Type;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.UnaryExpression;
import be.uantwerpen.ansymo.missionspecification.missionSpecification.Universality;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MissionSpecificationPackageImpl extends EPackageImpl implements MissionSpecificationPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass missionSpecificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass occurenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass universalityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass absenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass existenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boundedExistenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass orderEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass precedenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass responseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propositionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atomicPropositionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass instanceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass instanceDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass instanceRefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass associationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass attributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass realLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boolLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass globalScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass beforeScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass afterScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass betweenScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass afterUntilScopeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mockPropositionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass equalsConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lessThanConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass greaterThanConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tasksAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass teamAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass robotsAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass currentTaskAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass coveredTasksAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass todoTasksAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass finishedTasksAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass performingActionAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass currentPositionAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass homeAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass taskAreaAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass coveredPointsAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass todoPointsAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass finishedPointsAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pointsAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initialPositionAssociationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass referenceAssociationEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecificationPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MissionSpecificationPackageImpl()
  {
    super(eNS_URI, MissionSpecificationFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MissionSpecificationPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MissionSpecificationPackage init()
  {
    if (isInited) return (MissionSpecificationPackage)EPackage.Registry.INSTANCE.getEPackage(MissionSpecificationPackage.eNS_URI);

    // Obtain or create and register package
    MissionSpecificationPackageImpl theMissionSpecificationPackage = (MissionSpecificationPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MissionSpecificationPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MissionSpecificationPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theMissionSpecificationPackage.createPackageContents();

    // Initialize created meta-data
    theMissionSpecificationPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMissionSpecificationPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MissionSpecificationPackage.eNS_URI, theMissionSpecificationPackage);
    return theMissionSpecificationPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMissionSpecification()
  {
    return missionSpecificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMissionSpecification_Properties()
  {
    return (EReference)missionSpecificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProperty()
  {
    return propertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProperty_Scope()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProperty_Pattern()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getScope()
  {
    return scopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPattern()
  {
    return patternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPattern_P()
  {
    return (EReference)patternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOccurence()
  {
    return occurenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUniversality()
  {
    return universalityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAbsence()
  {
    return absenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExistence()
  {
    return existenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBoundedExistence()
  {
    return boundedExistenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBoundedExistence_N()
  {
    return (EAttribute)boundedExistenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOrder()
  {
    return orderEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOrder_S()
  {
    return (EReference)orderEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrecedence()
  {
    return precedenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getResponse()
  {
    return responseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProposition()
  {
    return propositionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProposition_Props()
  {
    return (EReference)propositionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAtomicProposition()
  {
    return atomicPropositionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAtomicProposition_Inst()
  {
    return (EReference)atomicPropositionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAtomicProposition_Cond()
  {
    return (EReference)atomicPropositionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAtomicProposition_Assoc()
  {
    return (EReference)atomicPropositionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAtomicProposition_Inst2()
  {
    return (EReference)atomicPropositionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAtomicProposition_Cond2()
  {
    return (EReference)atomicPropositionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBooleanExpression()
  {
    return booleanExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBinaryExpression()
  {
    return binaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinaryExpression_Attr()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinaryExpression_Val()
  {
    return (EReference)binaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUnaryExpression()
  {
    return unaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInstance()
  {
    return instanceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInstanceDecl()
  {
    return instanceDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInstanceDecl_Type()
  {
    return (EReference)instanceDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInstanceDecl_Name()
  {
    return (EAttribute)instanceDeclEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInstanceRef()
  {
    return instanceRefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInstanceRef_Ref()
  {
    return (EReference)instanceRefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssociation()
  {
    return associationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getType()
  {
    return typeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getType_Name()
  {
    return (EAttribute)typeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAttribute()
  {
    return attributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAttribute_Name()
  {
    return (EAttribute)attributeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArithmeticExpression()
  {
    return arithmeticExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIntLiteral()
  {
    return intLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIntLiteral_Value()
  {
    return (EAttribute)intLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRealLiteral()
  {
    return realLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRealLiteral_Value()
  {
    return (EAttribute)realLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStringLiteral()
  {
    return stringLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStringLiteral_Value()
  {
    return (EAttribute)stringLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBoolLiteral()
  {
    return boolLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBoolLiteral_Value()
  {
    return (EAttribute)boolLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getGlobalScope()
  {
    return globalScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBeforeScope()
  {
    return beforeScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBeforeScope_R()
  {
    return (EReference)beforeScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAfterScope()
  {
    return afterScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAfterScope_Q()
  {
    return (EReference)afterScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBetweenScope()
  {
    return betweenScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBetweenScope_Q()
  {
    return (EReference)betweenScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBetweenScope_R()
  {
    return (EReference)betweenScopeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAfterUntilScope()
  {
    return afterUntilScopeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAfterUntilScope_Q()
  {
    return (EReference)afterUntilScopeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAfterUntilScope_R()
  {
    return (EReference)afterUntilScopeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMockProposition()
  {
    return mockPropositionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCondition()
  {
    return conditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCondition_Attr()
  {
    return (EReference)conditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEqualsCondition()
  {
    return equalsConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLessThanCondition()
  {
    return lessThanConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getGreaterThanCondition()
  {
    return greaterThanConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNotCondition()
  {
    return notConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNotCondition_Attr()
  {
    return (EReference)notConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTasksAssociation()
  {
    return tasksAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTeamAssociation()
  {
    return teamAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRobotsAssociation()
  {
    return robotsAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCurrentTaskAssociation()
  {
    return currentTaskAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCoveredTasksAssociation()
  {
    return coveredTasksAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTodoTasksAssociation()
  {
    return todoTasksAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFinishedTasksAssociation()
  {
    return finishedTasksAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPerformingActionAssociation()
  {
    return performingActionAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInAssociation()
  {
    return inAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCurrentPositionAssociation()
  {
    return currentPositionAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getHomeAssociation()
  {
    return homeAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTaskAreaAssociation()
  {
    return taskAreaAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCoveredPointsAssociation()
  {
    return coveredPointsAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTodoPointsAssociation()
  {
    return todoPointsAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFinishedPointsAssociation()
  {
    return finishedPointsAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPointsAssociation()
  {
    return pointsAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInitialPositionAssociation()
  {
    return initialPositionAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReferenceAssociation()
  {
    return referenceAssociationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MissionSpecificationFactory getMissionSpecificationFactory()
  {
    return (MissionSpecificationFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    missionSpecificationEClass = createEClass(MISSION_SPECIFICATION);
    createEReference(missionSpecificationEClass, MISSION_SPECIFICATION__PROPERTIES);

    propertyEClass = createEClass(PROPERTY);
    createEReference(propertyEClass, PROPERTY__SCOPE);
    createEReference(propertyEClass, PROPERTY__PATTERN);

    scopeEClass = createEClass(SCOPE);

    patternEClass = createEClass(PATTERN);
    createEReference(patternEClass, PATTERN__P);

    occurenceEClass = createEClass(OCCURENCE);

    universalityEClass = createEClass(UNIVERSALITY);

    absenceEClass = createEClass(ABSENCE);

    existenceEClass = createEClass(EXISTENCE);

    boundedExistenceEClass = createEClass(BOUNDED_EXISTENCE);
    createEAttribute(boundedExistenceEClass, BOUNDED_EXISTENCE__N);

    orderEClass = createEClass(ORDER);
    createEReference(orderEClass, ORDER__S);

    precedenceEClass = createEClass(PRECEDENCE);

    responseEClass = createEClass(RESPONSE);

    propositionEClass = createEClass(PROPOSITION);
    createEReference(propositionEClass, PROPOSITION__PROPS);

    atomicPropositionEClass = createEClass(ATOMIC_PROPOSITION);
    createEReference(atomicPropositionEClass, ATOMIC_PROPOSITION__INST);
    createEReference(atomicPropositionEClass, ATOMIC_PROPOSITION__COND);
    createEReference(atomicPropositionEClass, ATOMIC_PROPOSITION__ASSOC);
    createEReference(atomicPropositionEClass, ATOMIC_PROPOSITION__INST2);
    createEReference(atomicPropositionEClass, ATOMIC_PROPOSITION__COND2);

    booleanExpressionEClass = createEClass(BOOLEAN_EXPRESSION);

    binaryExpressionEClass = createEClass(BINARY_EXPRESSION);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__ATTR);
    createEReference(binaryExpressionEClass, BINARY_EXPRESSION__VAL);

    unaryExpressionEClass = createEClass(UNARY_EXPRESSION);

    instanceEClass = createEClass(INSTANCE);

    instanceDeclEClass = createEClass(INSTANCE_DECL);
    createEReference(instanceDeclEClass, INSTANCE_DECL__TYPE);
    createEAttribute(instanceDeclEClass, INSTANCE_DECL__NAME);

    instanceRefEClass = createEClass(INSTANCE_REF);
    createEReference(instanceRefEClass, INSTANCE_REF__REF);

    associationEClass = createEClass(ASSOCIATION);

    typeEClass = createEClass(TYPE);
    createEAttribute(typeEClass, TYPE__NAME);

    attributeEClass = createEClass(ATTRIBUTE);
    createEAttribute(attributeEClass, ATTRIBUTE__NAME);

    arithmeticExpressionEClass = createEClass(ARITHMETIC_EXPRESSION);

    intLiteralEClass = createEClass(INT_LITERAL);
    createEAttribute(intLiteralEClass, INT_LITERAL__VALUE);

    realLiteralEClass = createEClass(REAL_LITERAL);
    createEAttribute(realLiteralEClass, REAL_LITERAL__VALUE);

    stringLiteralEClass = createEClass(STRING_LITERAL);
    createEAttribute(stringLiteralEClass, STRING_LITERAL__VALUE);

    boolLiteralEClass = createEClass(BOOL_LITERAL);
    createEAttribute(boolLiteralEClass, BOOL_LITERAL__VALUE);

    globalScopeEClass = createEClass(GLOBAL_SCOPE);

    beforeScopeEClass = createEClass(BEFORE_SCOPE);
    createEReference(beforeScopeEClass, BEFORE_SCOPE__R);

    afterScopeEClass = createEClass(AFTER_SCOPE);
    createEReference(afterScopeEClass, AFTER_SCOPE__Q);

    betweenScopeEClass = createEClass(BETWEEN_SCOPE);
    createEReference(betweenScopeEClass, BETWEEN_SCOPE__Q);
    createEReference(betweenScopeEClass, BETWEEN_SCOPE__R);

    afterUntilScopeEClass = createEClass(AFTER_UNTIL_SCOPE);
    createEReference(afterUntilScopeEClass, AFTER_UNTIL_SCOPE__Q);
    createEReference(afterUntilScopeEClass, AFTER_UNTIL_SCOPE__R);

    mockPropositionEClass = createEClass(MOCK_PROPOSITION);

    conditionEClass = createEClass(CONDITION);
    createEReference(conditionEClass, CONDITION__ATTR);

    equalsConditionEClass = createEClass(EQUALS_CONDITION);

    lessThanConditionEClass = createEClass(LESS_THAN_CONDITION);

    greaterThanConditionEClass = createEClass(GREATER_THAN_CONDITION);

    notConditionEClass = createEClass(NOT_CONDITION);
    createEReference(notConditionEClass, NOT_CONDITION__ATTR);

    tasksAssociationEClass = createEClass(TASKS_ASSOCIATION);

    teamAssociationEClass = createEClass(TEAM_ASSOCIATION);

    robotsAssociationEClass = createEClass(ROBOTS_ASSOCIATION);

    currentTaskAssociationEClass = createEClass(CURRENT_TASK_ASSOCIATION);

    coveredTasksAssociationEClass = createEClass(COVERED_TASKS_ASSOCIATION);

    todoTasksAssociationEClass = createEClass(TODO_TASKS_ASSOCIATION);

    finishedTasksAssociationEClass = createEClass(FINISHED_TASKS_ASSOCIATION);

    performingActionAssociationEClass = createEClass(PERFORMING_ACTION_ASSOCIATION);

    inAssociationEClass = createEClass(IN_ASSOCIATION);

    currentPositionAssociationEClass = createEClass(CURRENT_POSITION_ASSOCIATION);

    homeAssociationEClass = createEClass(HOME_ASSOCIATION);

    taskAreaAssociationEClass = createEClass(TASK_AREA_ASSOCIATION);

    coveredPointsAssociationEClass = createEClass(COVERED_POINTS_ASSOCIATION);

    todoPointsAssociationEClass = createEClass(TODO_POINTS_ASSOCIATION);

    finishedPointsAssociationEClass = createEClass(FINISHED_POINTS_ASSOCIATION);

    pointsAssociationEClass = createEClass(POINTS_ASSOCIATION);

    initialPositionAssociationEClass = createEClass(INITIAL_POSITION_ASSOCIATION);

    referenceAssociationEClass = createEClass(REFERENCE_ASSOCIATION);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    occurenceEClass.getESuperTypes().add(this.getPattern());
    universalityEClass.getESuperTypes().add(this.getOccurence());
    absenceEClass.getESuperTypes().add(this.getOccurence());
    existenceEClass.getESuperTypes().add(this.getOccurence());
    boundedExistenceEClass.getESuperTypes().add(this.getOccurence());
    orderEClass.getESuperTypes().add(this.getPattern());
    precedenceEClass.getESuperTypes().add(this.getOrder());
    responseEClass.getESuperTypes().add(this.getOrder());
    binaryExpressionEClass.getESuperTypes().add(this.getBooleanExpression());
    unaryExpressionEClass.getESuperTypes().add(this.getBooleanExpression());
    instanceDeclEClass.getESuperTypes().add(this.getInstance());
    instanceRefEClass.getESuperTypes().add(this.getInstance());
    intLiteralEClass.getESuperTypes().add(this.getArithmeticExpression());
    realLiteralEClass.getESuperTypes().add(this.getArithmeticExpression());
    stringLiteralEClass.getESuperTypes().add(this.getArithmeticExpression());
    boolLiteralEClass.getESuperTypes().add(this.getArithmeticExpression());
    globalScopeEClass.getESuperTypes().add(this.getScope());
    beforeScopeEClass.getESuperTypes().add(this.getScope());
    afterScopeEClass.getESuperTypes().add(this.getScope());
    betweenScopeEClass.getESuperTypes().add(this.getScope());
    afterUntilScopeEClass.getESuperTypes().add(this.getScope());
    mockPropositionEClass.getESuperTypes().add(this.getProposition());
    conditionEClass.getESuperTypes().add(this.getBooleanExpression());
    equalsConditionEClass.getESuperTypes().add(this.getBinaryExpression());
    lessThanConditionEClass.getESuperTypes().add(this.getBinaryExpression());
    greaterThanConditionEClass.getESuperTypes().add(this.getBinaryExpression());
    notConditionEClass.getESuperTypes().add(this.getUnaryExpression());
    tasksAssociationEClass.getESuperTypes().add(this.getAssociation());
    teamAssociationEClass.getESuperTypes().add(this.getAssociation());
    robotsAssociationEClass.getESuperTypes().add(this.getAssociation());
    currentTaskAssociationEClass.getESuperTypes().add(this.getAssociation());
    coveredTasksAssociationEClass.getESuperTypes().add(this.getAssociation());
    todoTasksAssociationEClass.getESuperTypes().add(this.getAssociation());
    finishedTasksAssociationEClass.getESuperTypes().add(this.getAssociation());
    performingActionAssociationEClass.getESuperTypes().add(this.getAssociation());
    inAssociationEClass.getESuperTypes().add(this.getAssociation());
    currentPositionAssociationEClass.getESuperTypes().add(this.getAssociation());
    homeAssociationEClass.getESuperTypes().add(this.getAssociation());
    taskAreaAssociationEClass.getESuperTypes().add(this.getAssociation());
    coveredPointsAssociationEClass.getESuperTypes().add(this.getAssociation());
    todoPointsAssociationEClass.getESuperTypes().add(this.getAssociation());
    finishedPointsAssociationEClass.getESuperTypes().add(this.getAssociation());
    pointsAssociationEClass.getESuperTypes().add(this.getAssociation());
    initialPositionAssociationEClass.getESuperTypes().add(this.getAssociation());
    referenceAssociationEClass.getESuperTypes().add(this.getAssociation());

    // Initialize classes and features; add operations and parameters
    initEClass(missionSpecificationEClass, MissionSpecification.class, "MissionSpecification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMissionSpecification_Properties(), this.getProperty(), null, "properties", null, 0, -1, MissionSpecification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertyEClass, Property.class, "Property", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProperty_Scope(), this.getScope(), null, "scope", null, 0, 1, Property.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProperty_Pattern(), this.getPattern(), null, "pattern", null, 0, 1, Property.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scopeEClass, Scope.class, "Scope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(patternEClass, Pattern.class, "Pattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPattern_P(), this.getProposition(), null, "p", null, 0, 1, Pattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(occurenceEClass, Occurence.class, "Occurence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(universalityEClass, Universality.class, "Universality", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(absenceEClass, Absence.class, "Absence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(existenceEClass, Existence.class, "Existence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(boundedExistenceEClass, BoundedExistence.class, "BoundedExistence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBoundedExistence_N(), ecorePackage.getEInt(), "n", null, 0, 1, BoundedExistence.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(orderEClass, Order.class, "Order", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOrder_S(), this.getProposition(), null, "s", null, 0, 1, Order.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(precedenceEClass, Precedence.class, "Precedence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(responseEClass, Response.class, "Response", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(propositionEClass, Proposition.class, "Proposition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProposition_Props(), this.getAtomicProposition(), null, "props", null, 0, -1, Proposition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atomicPropositionEClass, AtomicProposition.class, "AtomicProposition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAtomicProposition_Inst(), this.getInstance(), null, "inst", null, 0, 1, AtomicProposition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAtomicProposition_Cond(), this.getBooleanExpression(), null, "cond", null, 0, -1, AtomicProposition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAtomicProposition_Assoc(), this.getAssociation(), null, "assoc", null, 0, 1, AtomicProposition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAtomicProposition_Inst2(), this.getInstance(), null, "inst2", null, 0, 1, AtomicProposition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAtomicProposition_Cond2(), this.getBooleanExpression(), null, "cond2", null, 0, -1, AtomicProposition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(booleanExpressionEClass, BooleanExpression.class, "BooleanExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(binaryExpressionEClass, BinaryExpression.class, "BinaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBinaryExpression_Attr(), this.getAttribute(), null, "attr", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinaryExpression_Val(), this.getArithmeticExpression(), null, "val", null, 0, 1, BinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unaryExpressionEClass, UnaryExpression.class, "UnaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(instanceEClass, Instance.class, "Instance", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(instanceDeclEClass, InstanceDecl.class, "InstanceDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInstanceDecl_Type(), this.getType(), null, "type", null, 0, 1, InstanceDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInstanceDecl_Name(), ecorePackage.getEString(), "name", null, 0, 1, InstanceDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(instanceRefEClass, InstanceRef.class, "InstanceRef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInstanceRef_Ref(), this.getInstanceDecl(), null, "ref", null, 0, 1, InstanceRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(associationEClass, Association.class, "Association", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeEClass, Type.class, "Type", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getType_Name(), ecorePackage.getEString(), "name", null, 0, 1, Type.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(attributeEClass, Attribute.class, "Attribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAttribute_Name(), ecorePackage.getEString(), "name", null, 0, 1, Attribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticExpressionEClass, ArithmeticExpression.class, "ArithmeticExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(intLiteralEClass, IntLiteral.class, "IntLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIntLiteral_Value(), ecorePackage.getEInt(), "value", null, 0, 1, IntLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(realLiteralEClass, RealLiteral.class, "RealLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRealLiteral_Value(), ecorePackage.getEBigDecimal(), "value", null, 0, 1, RealLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stringLiteralEClass, StringLiteral.class, "StringLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStringLiteral_Value(), ecorePackage.getEString(), "value", null, 0, 1, StringLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boolLiteralEClass, BoolLiteral.class, "BoolLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBoolLiteral_Value(), ecorePackage.getEString(), "value", null, 0, 1, BoolLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(globalScopeEClass, GlobalScope.class, "GlobalScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(beforeScopeEClass, BeforeScope.class, "BeforeScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBeforeScope_R(), this.getProposition(), null, "r", null, 0, 1, BeforeScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(afterScopeEClass, AfterScope.class, "AfterScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAfterScope_Q(), this.getProposition(), null, "q", null, 0, 1, AfterScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(betweenScopeEClass, BetweenScope.class, "BetweenScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBetweenScope_Q(), this.getProposition(), null, "q", null, 0, 1, BetweenScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBetweenScope_R(), this.getProposition(), null, "r", null, 0, 1, BetweenScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(afterUntilScopeEClass, AfterUntilScope.class, "AfterUntilScope", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAfterUntilScope_Q(), this.getProposition(), null, "q", null, 0, 1, AfterUntilScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAfterUntilScope_R(), this.getProposition(), null, "r", null, 0, 1, AfterUntilScope.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mockPropositionEClass, MockProposition.class, "MockProposition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionEClass, Condition.class, "Condition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondition_Attr(), this.getAttribute(), null, "attr", null, 0, 1, Condition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(equalsConditionEClass, EqualsCondition.class, "EqualsCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(lessThanConditionEClass, LessThanCondition.class, "LessThanCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(greaterThanConditionEClass, GreaterThanCondition.class, "GreaterThanCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(notConditionEClass, NotCondition.class, "NotCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNotCondition_Attr(), this.getAttribute(), null, "attr", null, 0, 1, NotCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tasksAssociationEClass, TasksAssociation.class, "TasksAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(teamAssociationEClass, TeamAssociation.class, "TeamAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(robotsAssociationEClass, RobotsAssociation.class, "RobotsAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(currentTaskAssociationEClass, CurrentTaskAssociation.class, "CurrentTaskAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(coveredTasksAssociationEClass, CoveredTasksAssociation.class, "CoveredTasksAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(todoTasksAssociationEClass, TodoTasksAssociation.class, "TodoTasksAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(finishedTasksAssociationEClass, FinishedTasksAssociation.class, "FinishedTasksAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(performingActionAssociationEClass, PerformingActionAssociation.class, "PerformingActionAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(inAssociationEClass, InAssociation.class, "InAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(currentPositionAssociationEClass, CurrentPositionAssociation.class, "CurrentPositionAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(homeAssociationEClass, HomeAssociation.class, "HomeAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(taskAreaAssociationEClass, TaskAreaAssociation.class, "TaskAreaAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(coveredPointsAssociationEClass, CoveredPointsAssociation.class, "CoveredPointsAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(todoPointsAssociationEClass, TodoPointsAssociation.class, "TodoPointsAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(finishedPointsAssociationEClass, FinishedPointsAssociation.class, "FinishedPointsAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(pointsAssociationEClass, PointsAssociation.class, "PointsAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(initialPositionAssociationEClass, InitialPositionAssociation.class, "InitialPositionAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(referenceAssociationEClass, ReferenceAssociation.class, "ReferenceAssociation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Create resource
    createResource(eNS_URI);
  }

} //MissionSpecificationPackageImpl
