/*
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MissionSpecificationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MissionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.MissionSpecification");
		private final Assignment cPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_0 = (RuleCall)cPropertiesAssignment.eContents().get(0);
		
		//MissionSpecification:
		//	properties+=Property+;
		@Override public ParserRule getRule() { return rule; }
		
		//properties+=Property+
		public Assignment getPropertiesAssignment() { return cPropertiesAssignment; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0() { return cPropertiesPropertyParserRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScopeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScopeScopeParserRuleCall_0_0 = (RuleCall)cScopeAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Property:
		//	scope=Scope ',' pattern=Pattern '.'?;
		@Override public ParserRule getRule() { return rule; }
		
		//scope=Scope ',' pattern=Pattern '.'?
		public Group getGroup() { return cGroup; }
		
		//scope=Scope
		public Assignment getScopeAssignment_0() { return cScopeAssignment_0; }
		
		//Scope
		public RuleCall getScopeScopeParserRuleCall_0_0() { return cScopeScopeParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//'.'?
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGlobalScopeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGloballyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBeforeScopeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBeforeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRPropositionParserRuleCall_1_2_0 = (RuleCall)cRAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAfterScopeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAfterKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cQAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cQPropositionParserRuleCall_2_2_0 = (RuleCall)cQAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBetweenScopeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBetweenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cQAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cQPropositionParserRuleCall_3_2_0 = (RuleCall)cQAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cAndKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cRAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cRPropositionParserRuleCall_3_5_0 = (RuleCall)cRAssignment_3_5.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAfterUntilScopeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAfterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cQAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cQPropositionParserRuleCall_4_2_0 = (RuleCall)cQAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cUntilKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cRAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cRPropositionParserRuleCall_4_5_0 = (RuleCall)cRAssignment_4_5.eContents().get(0);
		
		//Scope:
		//	{GlobalScope} 'Globally' | {BeforeScope} 'Before' r=Proposition | {AfterScope} 'After' q=Proposition | {BetweenScope}
		//	'Between' q=Proposition ',' 'and' r=Proposition | {AfterUntilScope} 'After' q=Proposition ',' 'until' r=Proposition;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalScope} 'Globally' | {BeforeScope} 'Before' r=Proposition | {AfterScope} 'After' q=Proposition | {BetweenScope}
		//'Between' q=Proposition ',' 'and' r=Proposition | {AfterUntilScope} 'After' q=Proposition ',' 'until' r=Proposition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{GlobalScope} 'Globally'
		public Group getGroup_0() { return cGroup_0; }
		
		//{GlobalScope}
		public Action getGlobalScopeAction_0_0() { return cGlobalScopeAction_0_0; }
		
		//'Globally'
		public Keyword getGloballyKeyword_0_1() { return cGloballyKeyword_0_1; }
		
		//{BeforeScope} 'Before' r=Proposition
		public Group getGroup_1() { return cGroup_1; }
		
		//{BeforeScope}
		public Action getBeforeScopeAction_1_0() { return cBeforeScopeAction_1_0; }
		
		//'Before'
		public Keyword getBeforeKeyword_1_1() { return cBeforeKeyword_1_1; }
		
		//r=Proposition
		public Assignment getRAssignment_1_2() { return cRAssignment_1_2; }
		
		//Proposition
		public RuleCall getRPropositionParserRuleCall_1_2_0() { return cRPropositionParserRuleCall_1_2_0; }
		
		//{AfterScope} 'After' q=Proposition
		public Group getGroup_2() { return cGroup_2; }
		
		//{AfterScope}
		public Action getAfterScopeAction_2_0() { return cAfterScopeAction_2_0; }
		
		//'After'
		public Keyword getAfterKeyword_2_1() { return cAfterKeyword_2_1; }
		
		//q=Proposition
		public Assignment getQAssignment_2_2() { return cQAssignment_2_2; }
		
		//Proposition
		public RuleCall getQPropositionParserRuleCall_2_2_0() { return cQPropositionParserRuleCall_2_2_0; }
		
		//{BetweenScope} 'Between' q=Proposition ',' 'and' r=Proposition
		public Group getGroup_3() { return cGroup_3; }
		
		//{BetweenScope}
		public Action getBetweenScopeAction_3_0() { return cBetweenScopeAction_3_0; }
		
		//'Between'
		public Keyword getBetweenKeyword_3_1() { return cBetweenKeyword_3_1; }
		
		//q=Proposition
		public Assignment getQAssignment_3_2() { return cQAssignment_3_2; }
		
		//Proposition
		public RuleCall getQPropositionParserRuleCall_3_2_0() { return cQPropositionParserRuleCall_3_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }
		
		//'and'
		public Keyword getAndKeyword_3_4() { return cAndKeyword_3_4; }
		
		//r=Proposition
		public Assignment getRAssignment_3_5() { return cRAssignment_3_5; }
		
		//Proposition
		public RuleCall getRPropositionParserRuleCall_3_5_0() { return cRPropositionParserRuleCall_3_5_0; }
		
		//{AfterUntilScope} 'After' q=Proposition ',' 'until' r=Proposition
		public Group getGroup_4() { return cGroup_4; }
		
		//{AfterUntilScope}
		public Action getAfterUntilScopeAction_4_0() { return cAfterUntilScopeAction_4_0; }
		
		//'After'
		public Keyword getAfterKeyword_4_1() { return cAfterKeyword_4_1; }
		
		//q=Proposition
		public Assignment getQAssignment_4_2() { return cQAssignment_4_2; }
		
		//Proposition
		public RuleCall getQPropositionParserRuleCall_4_2_0() { return cQPropositionParserRuleCall_4_2_0; }
		
		//','
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }
		
		//'until'
		public Keyword getUntilKeyword_4_4() { return cUntilKeyword_4_4; }
		
		//r=Proposition
		public Assignment getRAssignment_4_5() { return cRAssignment_4_5; }
		
		//Proposition
		public RuleCall getRPropositionParserRuleCall_4_5_0() { return cRPropositionParserRuleCall_4_5_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOccurenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Pattern:
		//	Occurence | Order;
		@Override public ParserRule getRule() { return rule; }
		
		//Occurence | Order
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Occurence
		public RuleCall getOccurenceParserRuleCall_0() { return cOccurenceParserRuleCall_0; }
		
		//Order
		public RuleCall getOrderParserRuleCall_1() { return cOrderParserRuleCall_1; }
	}
	public class OccurenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Occurence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUniversalityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbsenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExistenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoundedExistenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Occurence:
		//	Universality | Absence | Existence | BoundedExistence;
		@Override public ParserRule getRule() { return rule; }
		
		//Universality | Absence | Existence | BoundedExistence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Universality
		public RuleCall getUniversalityParserRuleCall_0() { return cUniversalityParserRuleCall_0; }
		
		//Absence
		public RuleCall getAbsenceParserRuleCall_1() { return cAbsenceParserRuleCall_1; }
		
		//Existence
		public RuleCall getExistenceParserRuleCall_2() { return cExistenceParserRuleCall_2; }
		
		//BoundedExistence
		public RuleCall getBoundedExistenceParserRuleCall_3() { return cBoundedExistenceParserRuleCall_3; }
	}
	public class UniversalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Universality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAlwaysKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCaseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThatKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPPropositionParserRuleCall_6_0 = (RuleCall)cPAssignment_6.eContents().get(0);
		private final Keyword cHoldsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Universality:
		//	'it' 'is' 'always' 'the' 'case' 'that' p=Proposition 'holds'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'it' 'is' 'always' 'the' 'case' 'that' p=Proposition 'holds'?
		public Group getGroup() { return cGroup; }
		
		//'it'
		public Keyword getItKeyword_0() { return cItKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'always'
		public Keyword getAlwaysKeyword_2() { return cAlwaysKeyword_2; }
		
		//'the'
		public Keyword getTheKeyword_3() { return cTheKeyword_3; }
		
		//'case'
		public Keyword getCaseKeyword_4() { return cCaseKeyword_4; }
		
		//'that'
		public Keyword getThatKeyword_5() { return cThatKeyword_5; }
		
		//p=Proposition
		public Assignment getPAssignment_6() { return cPAssignment_6; }
		
		//Proposition
		public RuleCall getPPropositionParserRuleCall_6_0() { return cPPropositionParserRuleCall_6_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_7() { return cHoldsKeyword_7; }
	}
	public class AbsenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Absence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNeverKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCaseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThatKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPPropositionParserRuleCall_6_0 = (RuleCall)cPAssignment_6.eContents().get(0);
		private final Keyword cHoldsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// for context assist for consecutive keywords, see https://blogs.itemis.com/en/xtext-hint-content-assist-for-multiple-consecutive-keywords
		//Absence:
		//	'it' 'is' 'never' 'the' 'case' 'that' p=Proposition 'holds'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'it' 'is' 'never' 'the' 'case' 'that' p=Proposition 'holds'?
		public Group getGroup() { return cGroup; }
		
		//'it'
		public Keyword getItKeyword_0() { return cItKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'never'
		public Keyword getNeverKeyword_2() { return cNeverKeyword_2; }
		
		//'the'
		public Keyword getTheKeyword_3() { return cTheKeyword_3; }
		
		//'case'
		public Keyword getCaseKeyword_4() { return cCaseKeyword_4; }
		
		//'that'
		public Keyword getThatKeyword_5() { return cThatKeyword_5; }
		
		//p=Proposition
		public Assignment getPAssignment_6() { return cPAssignment_6; }
		
		//Proposition
		public RuleCall getPPropositionParserRuleCall_6_0() { return cPPropositionParserRuleCall_6_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_7() { return cHoldsKeyword_7; }
	}
	public class ExistenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Existence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPropositionParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Keyword cHoldsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEventuallyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// . must be here and not in Property rule for some reason
		//Existence:
		//	p=Proposition 'holds'? 'eventually';
		@Override public ParserRule getRule() { return rule; }
		
		//p=Proposition 'holds'? 'eventually'
		public Group getGroup() { return cGroup; }
		
		//p=Proposition
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//Proposition
		public RuleCall getPPropositionParserRuleCall_0_0() { return cPPropositionParserRuleCall_0_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_1() { return cHoldsKeyword_1; }
		
		//'eventually'
		public Keyword getEventuallyKeyword_2() { return cEventuallyKeyword_2; }
	}
	public class BoundedExistenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.BoundedExistence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPropositionParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Keyword cHoldsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMostKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNINTTerminalRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		private final Keyword cTimesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BoundedExistence:
		//	p=Proposition 'holds'? 'at' 'most' n=INT 'times';
		@Override public ParserRule getRule() { return rule; }
		
		//p=Proposition 'holds'? 'at' 'most' n=INT 'times'
		public Group getGroup() { return cGroup; }
		
		//p=Proposition
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//Proposition
		public RuleCall getPPropositionParserRuleCall_0_0() { return cPPropositionParserRuleCall_0_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_1() { return cHoldsKeyword_1; }
		
		//'at'
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//'most'
		public Keyword getMostKeyword_3() { return cMostKeyword_3; }
		
		//n=INT
		public Assignment getNAssignment_4() { return cNAssignment_4; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_4_0() { return cNINTTerminalRuleCall_4_0; }
		
		//'times'
		public Keyword getTimesKeyword_5() { return cTimesKeyword_5; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrecedenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cResponseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Order:
		//	Precedence | Response;
		@Override public ParserRule getRule() { return rule; }
		
		//Precedence | Response
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Precedence
		public RuleCall getPrecedenceParserRuleCall_0() { return cPrecedenceParserRuleCall_0; }
		
		//Response
		public RuleCall getResponseParserRuleCall_1() { return cResponseParserRuleCall_1; }
	}
	public class PrecedenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Precedence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPPropositionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Keyword cHoldsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cItKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMustKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHaveKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cBeenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cTheKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cCaseKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cThatKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cSPropositionParserRuleCall_12_0 = (RuleCall)cSAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cHasKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cOccurredKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cBeforehandKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Precedence:
		//	'if' p=Proposition 'holds'? ',' 'then' 'it' 'must' 'have' 'been' 'the' 'case' 'that' s=Proposition ('has'
		//	'occurred')? 'beforehand';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' p=Proposition 'holds'? ',' 'then' 'it' 'must' 'have' 'been' 'the' 'case' 'that' s=Proposition ('has' 'occurred')?
		//'beforehand'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//p=Proposition
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Proposition
		public RuleCall getPPropositionParserRuleCall_1_0() { return cPPropositionParserRuleCall_1_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_2() { return cHoldsKeyword_2; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//'it'
		public Keyword getItKeyword_5() { return cItKeyword_5; }
		
		//'must'
		public Keyword getMustKeyword_6() { return cMustKeyword_6; }
		
		//'have'
		public Keyword getHaveKeyword_7() { return cHaveKeyword_7; }
		
		//'been'
		public Keyword getBeenKeyword_8() { return cBeenKeyword_8; }
		
		//'the'
		public Keyword getTheKeyword_9() { return cTheKeyword_9; }
		
		//'case'
		public Keyword getCaseKeyword_10() { return cCaseKeyword_10; }
		
		//'that'
		public Keyword getThatKeyword_11() { return cThatKeyword_11; }
		
		//s=Proposition
		public Assignment getSAssignment_12() { return cSAssignment_12; }
		
		//Proposition
		public RuleCall getSPropositionParserRuleCall_12_0() { return cSPropositionParserRuleCall_12_0; }
		
		//('has' 'occurred')?
		public Group getGroup_13() { return cGroup_13; }
		
		//'has'
		public Keyword getHasKeyword_13_0() { return cHasKeyword_13_0; }
		
		//'occurred'
		public Keyword getOccurredKeyword_13_1() { return cOccurredKeyword_13_1; }
		
		//'beforehand'
		public Keyword getBeforehandKeyword_14() { return cBeforehandKeyword_14; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Response");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPPropositionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cOccurredKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cResponseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSPropositionParserRuleCall_7_0 = (RuleCall)cSAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cEventuallyKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cHoldsKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Response:
		//	'if' p=Proposition ('has' 'occurred')? ',' 'then' 'in' 'response' s=Proposition ('eventually' 'holds')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' p=Proposition ('has' 'occurred')? ',' 'then' 'in' 'response' s=Proposition ('eventually' 'holds')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//p=Proposition
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Proposition
		public RuleCall getPPropositionParserRuleCall_1_0() { return cPPropositionParserRuleCall_1_0; }
		
		//('has' 'occurred')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'has'
		public Keyword getHasKeyword_2_0() { return cHasKeyword_2_0; }
		
		//'occurred'
		public Keyword getOccurredKeyword_2_1() { return cOccurredKeyword_2_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//'response'
		public Keyword getResponseKeyword_6() { return cResponseKeyword_6; }
		
		//s=Proposition
		public Assignment getSAssignment_7() { return cSAssignment_7; }
		
		//Proposition
		public RuleCall getSPropositionParserRuleCall_7_0() { return cSPropositionParserRuleCall_7_0; }
		
		//('eventually' 'holds')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'eventually'
		public Keyword getEventuallyKeyword_8_0() { return cEventuallyKeyword_8_0; }
		
		//'holds'
		public Keyword getHoldsKeyword_8_1() { return cHoldsKeyword_8_1; }
	}
	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Proposition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMockPropositionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTodoKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPropsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPropsAtomicPropositionParserRuleCall_1_0_0 = (RuleCall)cPropsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAlsoKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPropsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPropsAtomicPropositionParserRuleCall_1_1_2_0 = (RuleCall)cPropsAssignment_1_1_2.eContents().get(0);
		
		//Proposition:
		//	{MockProposition} 'todo' | props+=AtomicProposition ('and' 'also' props+=AtomicProposition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MockProposition} 'todo' | props+=AtomicProposition ('and' 'also' props+=AtomicProposition)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MockProposition} 'todo'
		public Group getGroup_0() { return cGroup_0; }
		
		//{MockProposition}
		public Action getMockPropositionAction_0_0() { return cMockPropositionAction_0_0; }
		
		//'todo'
		public Keyword getTodoKeyword_0_1() { return cTodoKeyword_0_1; }
		
		//props+=AtomicProposition ('and' 'also' props+=AtomicProposition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//props+=AtomicProposition
		public Assignment getPropsAssignment_1_0() { return cPropsAssignment_1_0; }
		
		//AtomicProposition
		public RuleCall getPropsAtomicPropositionParserRuleCall_1_0_0() { return cPropsAtomicPropositionParserRuleCall_1_0_0; }
		
		//('and' 'also' props+=AtomicProposition)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'and'
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }
		
		//'also'
		public Keyword getAlsoKeyword_1_1_1() { return cAlsoKeyword_1_1_1; }
		
		//props+=AtomicProposition
		public Assignment getPropsAssignment_1_1_2() { return cPropsAssignment_1_1_2; }
		
		//AtomicProposition
		public RuleCall getPropsAtomicPropositionParserRuleCall_1_1_2_0() { return cPropsAtomicPropositionParserRuleCall_1_1_2_0; }
	}
	public class AtomicPropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.AtomicProposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstInstanceParserRuleCall_0_0 = (RuleCall)cInstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondBooleanExpressionParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cCondAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cCondBooleanExpressionParserRuleCall_1_2_1_0 = (RuleCall)cCondAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssocAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAssocAssociationParserRuleCall_2_0_0 = (RuleCall)cAssocAssignment_2_0.eContents().get(0);
		private final Assignment cInst2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInst2InstanceParserRuleCall_2_1_0 = (RuleCall)cInst2Assignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cWithKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cCond2Assignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cCond2BooleanExpressionParserRuleCall_2_2_1_0 = (RuleCall)cCond2Assignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cAndKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cCond2Assignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cCond2BooleanExpressionParserRuleCall_2_2_2_1_0 = (RuleCall)cCond2Assignment_2_2_2_1.eContents().get(0);
		
		////inst=Instance 'with' cond+=BooleanExpression ('and' cond+=BooleanExpression)* |
		//AtomicProposition:
		//	inst=Instance ('with' cond+=BooleanExpression ('and' cond+=BooleanExpression)*)? (assoc=Association inst2=Instance
		//	('with' cond2+=BooleanExpression ('and' cond2+=BooleanExpression)*)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//inst=Instance ('with' cond+=BooleanExpression ('and' cond+=BooleanExpression)*)? (assoc=Association inst2=Instance
		//('with' cond2+=BooleanExpression ('and' cond2+=BooleanExpression)*)?)?
		public Group getGroup() { return cGroup; }
		
		//inst=Instance
		public Assignment getInstAssignment_0() { return cInstAssignment_0; }
		
		//Instance
		public RuleCall getInstInstanceParserRuleCall_0_0() { return cInstInstanceParserRuleCall_0_0; }
		
		//('with' cond+=BooleanExpression ('and' cond+=BooleanExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'with'
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }
		
		//cond+=BooleanExpression
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }
		
		//BooleanExpression
		public RuleCall getCondBooleanExpressionParserRuleCall_1_1_0() { return cCondBooleanExpressionParserRuleCall_1_1_0; }
		
		//('and' cond+=BooleanExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//cond+=BooleanExpression
		public Assignment getCondAssignment_1_2_1() { return cCondAssignment_1_2_1; }
		
		//BooleanExpression
		public RuleCall getCondBooleanExpressionParserRuleCall_1_2_1_0() { return cCondBooleanExpressionParserRuleCall_1_2_1_0; }
		
		//(assoc=Association inst2=Instance ('with' cond2+=BooleanExpression ('and' cond2+=BooleanExpression)*)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//assoc=Association
		public Assignment getAssocAssignment_2_0() { return cAssocAssignment_2_0; }
		
		//Association
		public RuleCall getAssocAssociationParserRuleCall_2_0_0() { return cAssocAssociationParserRuleCall_2_0_0; }
		
		//inst2=Instance
		public Assignment getInst2Assignment_2_1() { return cInst2Assignment_2_1; }
		
		//Instance
		public RuleCall getInst2InstanceParserRuleCall_2_1_0() { return cInst2InstanceParserRuleCall_2_1_0; }
		
		//('with' cond2+=BooleanExpression ('and' cond2+=BooleanExpression)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'with'
		public Keyword getWithKeyword_2_2_0() { return cWithKeyword_2_2_0; }
		
		//cond2+=BooleanExpression
		public Assignment getCond2Assignment_2_2_1() { return cCond2Assignment_2_2_1; }
		
		//BooleanExpression
		public RuleCall getCond2BooleanExpressionParserRuleCall_2_2_1_0() { return cCond2BooleanExpressionParserRuleCall_2_2_1_0; }
		
		//('and' cond2+=BooleanExpression)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }
		
		//'and'
		public Keyword getAndKeyword_2_2_2_0() { return cAndKeyword_2_2_2_0; }
		
		//cond2+=BooleanExpression
		public Assignment getCond2Assignment_2_2_2_1() { return cCond2Assignment_2_2_2_1; }
		
		//BooleanExpression
		public RuleCall getCond2BooleanExpressionParserRuleCall_2_2_2_1_0() { return cCond2BooleanExpressionParserRuleCall_2_2_2_1_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConditionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAttrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_2_1_0 = (RuleCall)cAttrAssignment_2_1.eContents().get(0);
		
		//BooleanExpression:
		//	BinaryExpression | UnaryExpression | {Condition} attr=Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression | UnaryExpression | {Condition} attr=Attribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_0() { return cBinaryExpressionParserRuleCall_0; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1() { return cUnaryExpressionParserRuleCall_1; }
		
		//{Condition} attr=Attribute
		public Group getGroup_2() { return cGroup_2; }
		
		//{Condition}
		public Action getConditionAction_2_0() { return cConditionAction_2_0; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_2_1() { return cAttrAssignment_2_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_2_1_0() { return cAttrAttributeParserRuleCall_2_1_0; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.BinaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEqualsConditionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAttrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_0_1_0 = (RuleCall)cAttrAssignment_0_1.eContents().get(0);
		private final Keyword cAsKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValLiteralParserRuleCall_0_3_0 = (RuleCall)cValAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLessThanConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAttrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_1_1_0 = (RuleCall)cAttrAssignment_1_1.eContents().get(0);
		private final Keyword cLessKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cThanKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValLiteralParserRuleCall_1_4_0 = (RuleCall)cValAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cGreaterThanConditionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAttrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_2_1_0 = (RuleCall)cAttrAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cThanKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cValAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cValLiteralParserRuleCall_2_4_0 = (RuleCall)cValAssignment_2_4.eContents().get(0);
		
		//BinaryExpression:
		//	{EqualsCondition} attr=Attribute 'as' val=Literal | {LessThanCondition} attr=Attribute 'less' 'than' val=Literal |
		//	{GreaterThanCondition} attr=Attribute 'greater' 'than' val=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualsCondition} attr=Attribute 'as' val=Literal | {LessThanCondition} attr=Attribute 'less' 'than' val=Literal |
		//{GreaterThanCondition} attr=Attribute 'greater' 'than' val=Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EqualsCondition} attr=Attribute 'as' val=Literal
		public Group getGroup_0() { return cGroup_0; }
		
		//{EqualsCondition}
		public Action getEqualsConditionAction_0_0() { return cEqualsConditionAction_0_0; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_0_1() { return cAttrAssignment_0_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_0_1_0() { return cAttrAttributeParserRuleCall_0_1_0; }
		
		//'as'
		public Keyword getAsKeyword_0_2() { return cAsKeyword_0_2; }
		
		//val=Literal
		public Assignment getValAssignment_0_3() { return cValAssignment_0_3; }
		
		//Literal
		public RuleCall getValLiteralParserRuleCall_0_3_0() { return cValLiteralParserRuleCall_0_3_0; }
		
		//{LessThanCondition} attr=Attribute 'less' 'than' val=Literal
		public Group getGroup_1() { return cGroup_1; }
		
		//{LessThanCondition}
		public Action getLessThanConditionAction_1_0() { return cLessThanConditionAction_1_0; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_1_1() { return cAttrAssignment_1_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_1_1_0() { return cAttrAttributeParserRuleCall_1_1_0; }
		
		//'less'
		public Keyword getLessKeyword_1_2() { return cLessKeyword_1_2; }
		
		//'than'
		public Keyword getThanKeyword_1_3() { return cThanKeyword_1_3; }
		
		//val=Literal
		public Assignment getValAssignment_1_4() { return cValAssignment_1_4; }
		
		//Literal
		public RuleCall getValLiteralParserRuleCall_1_4_0() { return cValLiteralParserRuleCall_1_4_0; }
		
		//{GreaterThanCondition} attr=Attribute 'greater' 'than' val=Literal
		public Group getGroup_2() { return cGroup_2; }
		
		//{GreaterThanCondition}
		public Action getGreaterThanConditionAction_2_0() { return cGreaterThanConditionAction_2_0; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_2_1() { return cAttrAssignment_2_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_2_1_0() { return cAttrAttributeParserRuleCall_2_1_0; }
		
		//'greater'
		public Keyword getGreaterKeyword_2_2() { return cGreaterKeyword_2_2; }
		
		//'than'
		public Keyword getThanKeyword_2_3() { return cThanKeyword_2_3; }
		
		//val=Literal
		public Assignment getValAssignment_2_4() { return cValAssignment_2_4; }
		
		//Literal
		public RuleCall getValLiteralParserRuleCall_2_4_0() { return cValLiteralParserRuleCall_2_4_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrAttributeParserRuleCall_2_0 = (RuleCall)cAttrAssignment_2.eContents().get(0);
		
		//UnaryExpression:
		//	{NotCondition} 'not' attr=Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//{NotCondition} 'not' attr=Attribute
		public Group getGroup() { return cGroup; }
		
		//{NotCondition}
		public Action getNotConditionAction_0() { return cNotConditionAction_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_2() { return cAttrAssignment_2; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_2_0() { return cAttrAttributeParserRuleCall_2_0; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Instance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instance:
		//	InstanceRef | InstanceDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//InstanceRef | InstanceDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstanceRef
		public RuleCall getInstanceRefParserRuleCall_0() { return cInstanceRefParserRuleCall_0; }
		
		//InstanceDecl
		public RuleCall getInstanceDeclParserRuleCall_1() { return cInstanceDeclParserRuleCall_1; }
	}
	public class InstanceDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.InstanceDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAnKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InstanceDecl:
		//	('a' | 'an') type=Type name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//('a' | 'an') type=Type name=ID?
		public Group getGroup() { return cGroup; }
		
		//('a' | 'an')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'a'
		public Keyword getAKeyword_0_0() { return cAKeyword_0_0; }
		
		//'an'
		public Keyword getAnKeyword_0_1() { return cAnKeyword_0_1; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class InstanceRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.InstanceRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefInstanceDeclCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefInstanceDeclIDTerminalRuleCall_0_1 = (RuleCall)cRefInstanceDeclCrossReference_0.eContents().get(1);
		
		//InstanceRef:
		//	ref=[InstanceDecl];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[InstanceDecl]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[InstanceDecl]
		public CrossReference getRefInstanceDeclCrossReference_0() { return cRefInstanceDeclCrossReference_0; }
		
		//ID
		public RuleCall getRefInstanceDeclIDTerminalRuleCall_0_1() { return cRefInstanceDeclIDTerminalRuleCall_0_1; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Association");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTasksAssociationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cThatKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cIsKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cAKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cTaskKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cOfKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTeamAssociationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThatKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cIsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cAKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cTeamKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cOfKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRobotsAssociationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cThatKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cIsKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cInKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCurrentTaskAssociationAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cCurrentlyKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cDoingKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCoveredTasksAssociationAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cThatKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cHasKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cScheduledKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cTodoTasksAssociationAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cThatKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cHasKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cPlannedKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cInKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cTheKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Keyword cFutureKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cFinishedTasksAssociationAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cThatKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cHasKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cFinishedKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cPerformingActionAssociationAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cCurrentlyKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cPerformingKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cInAssociationAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cCurrentlyKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cInKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cCurrentPositionAssociationAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cCurrentlyKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cOnKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cHomeAssociationAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cWithKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cAsKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Keyword cHomeKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cTaskAreaAssociationAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cWithKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cTaskKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Keyword cAreaKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cCoveredPointsAssociationAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cWhichKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cVisitsKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cTodoPointsAssociationAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cWhichKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cWillKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Keyword cVisitKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Keyword cInKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Keyword cTheKeyword_13_5 = (Keyword)cGroup_13.eContents().get(5);
		private final Keyword cFutureKeyword_13_6 = (Keyword)cGroup_13.eContents().get(6);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cFinishedPointsAssociationAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cWhichKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cHasKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Keyword cVisitedKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cPointsAssociationAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cWithKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cPointsKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cInitialPositionAssociationAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cWithKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cInitialKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Keyword cPositionKeyword_16_3 = (Keyword)cGroup_16.eContents().get(3);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cReferenceAssociationAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cWhichKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cReferencesKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		
		//Association:
		//	{TasksAssociation} 'that' 'is' 'a' 'task' 'of' | {TeamAssociation} 'that' 'is' 'a' 'team' 'of' | {RobotsAssociation}
		//	'that' 'is' 'in' | {CurrentTaskAssociation} 'currently'? 'doing' | {CoveredTasksAssociation} 'that' 'has' 'scheduled'
		//	| {TodoTasksAssociation} 'that' 'has' 'planned' 'in' 'the' 'future' | {FinishedTasksAssociation} 'that' 'has'
		//	'finished' | {PerformingActionAssociation} 'currently'? 'performing' | {InAssociation} 'currently'? 'in' |
		//	{CurrentPositionAssociation} 'currently'? 'on' | {HomeAssociation} 'with' 'as' 'home' | {TaskAreaAssociation} 'with'
		//	'task' 'area' | {CoveredPointsAssociation} 'which' 'visits' | {TodoPointsAssociation} 'which' 'will' 'visit' 'in'
		//	'the' 'future' | {FinishedPointsAssociation} 'which' 'has' 'visited' | {PointsAssociation} 'with' 'points' |
		//	{InitialPositionAssociation} 'with' 'initial' 'position' | {ReferenceAssociation} 'which' 'references';
		@Override public ParserRule getRule() { return rule; }
		
		//{TasksAssociation} 'that' 'is' 'a' 'task' 'of' | {TeamAssociation} 'that' 'is' 'a' 'team' 'of' | {RobotsAssociation}
		//'that' 'is' 'in' | {CurrentTaskAssociation} 'currently'? 'doing' | {CoveredTasksAssociation} 'that' 'has' 'scheduled'
		//| {TodoTasksAssociation} 'that' 'has' 'planned' 'in' 'the' 'future' | {FinishedTasksAssociation} 'that' 'has'
		//'finished' | {PerformingActionAssociation} 'currently'? 'performing' | {InAssociation} 'currently'? 'in' |
		//{CurrentPositionAssociation} 'currently'? 'on' | {HomeAssociation} 'with' 'as' 'home' | {TaskAreaAssociation} 'with'
		//'task' 'area' | {CoveredPointsAssociation} 'which' 'visits' | {TodoPointsAssociation} 'which' 'will' 'visit' 'in'
		//'the' 'future' | {FinishedPointsAssociation} 'which' 'has' 'visited' | {PointsAssociation} 'with' 'points' |
		//{InitialPositionAssociation} 'with' 'initial' 'position' | {ReferenceAssociation} 'which' 'references'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TasksAssociation} 'that' 'is' 'a' 'task' 'of'
		public Group getGroup_0() { return cGroup_0; }
		
		//{TasksAssociation}
		public Action getTasksAssociationAction_0_0() { return cTasksAssociationAction_0_0; }
		
		//'that'
		public Keyword getThatKeyword_0_1() { return cThatKeyword_0_1; }
		
		//'is'
		public Keyword getIsKeyword_0_2() { return cIsKeyword_0_2; }
		
		//'a'
		public Keyword getAKeyword_0_3() { return cAKeyword_0_3; }
		
		//'task'
		public Keyword getTaskKeyword_0_4() { return cTaskKeyword_0_4; }
		
		//'of'
		public Keyword getOfKeyword_0_5() { return cOfKeyword_0_5; }
		
		//{TeamAssociation} 'that' 'is' 'a' 'team' 'of'
		public Group getGroup_1() { return cGroup_1; }
		
		//{TeamAssociation}
		public Action getTeamAssociationAction_1_0() { return cTeamAssociationAction_1_0; }
		
		//'that'
		public Keyword getThatKeyword_1_1() { return cThatKeyword_1_1; }
		
		//'is'
		public Keyword getIsKeyword_1_2() { return cIsKeyword_1_2; }
		
		//'a'
		public Keyword getAKeyword_1_3() { return cAKeyword_1_3; }
		
		//'team'
		public Keyword getTeamKeyword_1_4() { return cTeamKeyword_1_4; }
		
		//'of'
		public Keyword getOfKeyword_1_5() { return cOfKeyword_1_5; }
		
		//{RobotsAssociation} 'that' 'is' 'in'
		public Group getGroup_2() { return cGroup_2; }
		
		//{RobotsAssociation}
		public Action getRobotsAssociationAction_2_0() { return cRobotsAssociationAction_2_0; }
		
		//'that'
		public Keyword getThatKeyword_2_1() { return cThatKeyword_2_1; }
		
		//'is'
		public Keyword getIsKeyword_2_2() { return cIsKeyword_2_2; }
		
		//'in'
		public Keyword getInKeyword_2_3() { return cInKeyword_2_3; }
		
		//{CurrentTaskAssociation} 'currently'? 'doing'
		public Group getGroup_3() { return cGroup_3; }
		
		//{CurrentTaskAssociation}
		public Action getCurrentTaskAssociationAction_3_0() { return cCurrentTaskAssociationAction_3_0; }
		
		//'currently'?
		public Keyword getCurrentlyKeyword_3_1() { return cCurrentlyKeyword_3_1; }
		
		//'doing'
		public Keyword getDoingKeyword_3_2() { return cDoingKeyword_3_2; }
		
		//{CoveredTasksAssociation} 'that' 'has' 'scheduled'
		public Group getGroup_4() { return cGroup_4; }
		
		//{CoveredTasksAssociation}
		public Action getCoveredTasksAssociationAction_4_0() { return cCoveredTasksAssociationAction_4_0; }
		
		//'that'
		public Keyword getThatKeyword_4_1() { return cThatKeyword_4_1; }
		
		//'has'
		public Keyword getHasKeyword_4_2() { return cHasKeyword_4_2; }
		
		//'scheduled'
		public Keyword getScheduledKeyword_4_3() { return cScheduledKeyword_4_3; }
		
		//{TodoTasksAssociation} 'that' 'has' 'planned' 'in' 'the' 'future'
		public Group getGroup_5() { return cGroup_5; }
		
		//{TodoTasksAssociation}
		public Action getTodoTasksAssociationAction_5_0() { return cTodoTasksAssociationAction_5_0; }
		
		//'that'
		public Keyword getThatKeyword_5_1() { return cThatKeyword_5_1; }
		
		//'has'
		public Keyword getHasKeyword_5_2() { return cHasKeyword_5_2; }
		
		//'planned'
		public Keyword getPlannedKeyword_5_3() { return cPlannedKeyword_5_3; }
		
		//'in'
		public Keyword getInKeyword_5_4() { return cInKeyword_5_4; }
		
		//'the'
		public Keyword getTheKeyword_5_5() { return cTheKeyword_5_5; }
		
		//'future'
		public Keyword getFutureKeyword_5_6() { return cFutureKeyword_5_6; }
		
		//{FinishedTasksAssociation} 'that' 'has' 'finished'
		public Group getGroup_6() { return cGroup_6; }
		
		//{FinishedTasksAssociation}
		public Action getFinishedTasksAssociationAction_6_0() { return cFinishedTasksAssociationAction_6_0; }
		
		//'that'
		public Keyword getThatKeyword_6_1() { return cThatKeyword_6_1; }
		
		//'has'
		public Keyword getHasKeyword_6_2() { return cHasKeyword_6_2; }
		
		//'finished'
		public Keyword getFinishedKeyword_6_3() { return cFinishedKeyword_6_3; }
		
		//{PerformingActionAssociation} 'currently'? 'performing'
		public Group getGroup_7() { return cGroup_7; }
		
		//{PerformingActionAssociation}
		public Action getPerformingActionAssociationAction_7_0() { return cPerformingActionAssociationAction_7_0; }
		
		//'currently'?
		public Keyword getCurrentlyKeyword_7_1() { return cCurrentlyKeyword_7_1; }
		
		//'performing'
		public Keyword getPerformingKeyword_7_2() { return cPerformingKeyword_7_2; }
		
		//{InAssociation} 'currently'? 'in'
		public Group getGroup_8() { return cGroup_8; }
		
		//{InAssociation}
		public Action getInAssociationAction_8_0() { return cInAssociationAction_8_0; }
		
		//'currently'?
		public Keyword getCurrentlyKeyword_8_1() { return cCurrentlyKeyword_8_1; }
		
		//'in'
		public Keyword getInKeyword_8_2() { return cInKeyword_8_2; }
		
		//{CurrentPositionAssociation} 'currently'? 'on'
		public Group getGroup_9() { return cGroup_9; }
		
		//{CurrentPositionAssociation}
		public Action getCurrentPositionAssociationAction_9_0() { return cCurrentPositionAssociationAction_9_0; }
		
		//'currently'?
		public Keyword getCurrentlyKeyword_9_1() { return cCurrentlyKeyword_9_1; }
		
		//'on'
		public Keyword getOnKeyword_9_2() { return cOnKeyword_9_2; }
		
		//{HomeAssociation} 'with' 'as' 'home'
		public Group getGroup_10() { return cGroup_10; }
		
		//{HomeAssociation}
		public Action getHomeAssociationAction_10_0() { return cHomeAssociationAction_10_0; }
		
		//'with'
		public Keyword getWithKeyword_10_1() { return cWithKeyword_10_1; }
		
		//'as'
		public Keyword getAsKeyword_10_2() { return cAsKeyword_10_2; }
		
		//'home'
		public Keyword getHomeKeyword_10_3() { return cHomeKeyword_10_3; }
		
		//{TaskAreaAssociation} 'with' 'task' 'area'
		public Group getGroup_11() { return cGroup_11; }
		
		//{TaskAreaAssociation}
		public Action getTaskAreaAssociationAction_11_0() { return cTaskAreaAssociationAction_11_0; }
		
		//'with'
		public Keyword getWithKeyword_11_1() { return cWithKeyword_11_1; }
		
		//'task'
		public Keyword getTaskKeyword_11_2() { return cTaskKeyword_11_2; }
		
		//'area'
		public Keyword getAreaKeyword_11_3() { return cAreaKeyword_11_3; }
		
		//{CoveredPointsAssociation} 'which' 'visits'
		public Group getGroup_12() { return cGroup_12; }
		
		//{CoveredPointsAssociation}
		public Action getCoveredPointsAssociationAction_12_0() { return cCoveredPointsAssociationAction_12_0; }
		
		//'which'
		public Keyword getWhichKeyword_12_1() { return cWhichKeyword_12_1; }
		
		//'visits'
		public Keyword getVisitsKeyword_12_2() { return cVisitsKeyword_12_2; }
		
		//{TodoPointsAssociation} 'which' 'will' 'visit' 'in' 'the' 'future'
		public Group getGroup_13() { return cGroup_13; }
		
		//{TodoPointsAssociation}
		public Action getTodoPointsAssociationAction_13_0() { return cTodoPointsAssociationAction_13_0; }
		
		//'which'
		public Keyword getWhichKeyword_13_1() { return cWhichKeyword_13_1; }
		
		//'will'
		public Keyword getWillKeyword_13_2() { return cWillKeyword_13_2; }
		
		//'visit'
		public Keyword getVisitKeyword_13_3() { return cVisitKeyword_13_3; }
		
		//'in'
		public Keyword getInKeyword_13_4() { return cInKeyword_13_4; }
		
		//'the'
		public Keyword getTheKeyword_13_5() { return cTheKeyword_13_5; }
		
		//'future'
		public Keyword getFutureKeyword_13_6() { return cFutureKeyword_13_6; }
		
		//{FinishedPointsAssociation} 'which' 'has' 'visited'
		public Group getGroup_14() { return cGroup_14; }
		
		//{FinishedPointsAssociation}
		public Action getFinishedPointsAssociationAction_14_0() { return cFinishedPointsAssociationAction_14_0; }
		
		//'which'
		public Keyword getWhichKeyword_14_1() { return cWhichKeyword_14_1; }
		
		//'has'
		public Keyword getHasKeyword_14_2() { return cHasKeyword_14_2; }
		
		//'visited'
		public Keyword getVisitedKeyword_14_3() { return cVisitedKeyword_14_3; }
		
		//{PointsAssociation} 'with' 'points'
		public Group getGroup_15() { return cGroup_15; }
		
		//{PointsAssociation}
		public Action getPointsAssociationAction_15_0() { return cPointsAssociationAction_15_0; }
		
		//'with'
		public Keyword getWithKeyword_15_1() { return cWithKeyword_15_1; }
		
		//'points'
		public Keyword getPointsKeyword_15_2() { return cPointsKeyword_15_2; }
		
		//{InitialPositionAssociation} 'with' 'initial' 'position'
		public Group getGroup_16() { return cGroup_16; }
		
		//{InitialPositionAssociation}
		public Action getInitialPositionAssociationAction_16_0() { return cInitialPositionAssociationAction_16_0; }
		
		//'with'
		public Keyword getWithKeyword_16_1() { return cWithKeyword_16_1; }
		
		//'initial'
		public Keyword getInitialKeyword_16_2() { return cInitialKeyword_16_2; }
		
		//'position'
		public Keyword getPositionKeyword_16_3() { return cPositionKeyword_16_3; }
		
		//{ReferenceAssociation} 'which' 'references'
		public Group getGroup_17() { return cGroup_17; }
		
		//{ReferenceAssociation}
		public Action getReferenceAssociationAction_17_0() { return cReferenceAssociationAction_17_0; }
		
		//'which'
		public Keyword getWhichKeyword_17_1() { return cWhichKeyword_17_1; }
		
		//'references'
		public Keyword getReferencesKeyword_17_2() { return cReferencesKeyword_17_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Type:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Attribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Attribute:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal ArithmeticExpression:
		//	IntLiteral | RealLiteral | StringLiteral | BoolLiteral
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | RealLiteral | StringLiteral | BoolLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_3() { return cBoolLiteralParserRuleCall_3; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=SignedInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SignedInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0() { return cValueSignedIntParserRuleCall_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.RealLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedRealParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLiteral:
		//	value=SignedReal;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SignedReal
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SignedReal
		public RuleCall getValueSignedRealParserRuleCall_0() { return cValueSignedRealParserRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.BoolLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BoolLiteral:
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.SignedReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cREALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedReal ecore::EBigDecimal:
		//	'-'? REAL
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? REAL
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//REAL
		public RuleCall getREALTerminalRuleCall_1() { return cREALTerminalRuleCall_1; }
	}
	
	
	private final MissionSpecificationElements pMissionSpecification;
	private final PropertyElements pProperty;
	private final ScopeElements pScope;
	private final PatternElements pPattern;
	private final OccurenceElements pOccurence;
	private final UniversalityElements pUniversality;
	private final AbsenceElements pAbsence;
	private final ExistenceElements pExistence;
	private final BoundedExistenceElements pBoundedExistence;
	private final OrderElements pOrder;
	private final PrecedenceElements pPrecedence;
	private final ResponseElements pResponse;
	private final PropositionElements pProposition;
	private final AtomicPropositionElements pAtomicProposition;
	private final BooleanExpressionElements pBooleanExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final InstanceElements pInstance;
	private final InstanceDeclElements pInstanceDecl;
	private final InstanceRefElements pInstanceRef;
	private final AssociationElements pAssociation;
	private final TypeElements pType;
	private final AttributeElements pAttribute;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final RealLiteralElements pRealLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BoolLiteralElements pBoolLiteral;
	private final SignedIntElements pSignedInt;
	private final SignedRealElements pSignedReal;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MissionSpecificationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMissionSpecification = new MissionSpecificationElements();
		this.pProperty = new PropertyElements();
		this.pScope = new ScopeElements();
		this.pPattern = new PatternElements();
		this.pOccurence = new OccurenceElements();
		this.pUniversality = new UniversalityElements();
		this.pAbsence = new AbsenceElements();
		this.pExistence = new ExistenceElements();
		this.pBoundedExistence = new BoundedExistenceElements();
		this.pOrder = new OrderElements();
		this.pPrecedence = new PrecedenceElements();
		this.pResponse = new ResponseElements();
		this.pProposition = new PropositionElements();
		this.pAtomicProposition = new AtomicPropositionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pInstance = new InstanceElements();
		this.pInstanceDecl = new InstanceDeclElements();
		this.pInstanceRef = new InstanceRefElements();
		this.pAssociation = new AssociationElements();
		this.pType = new TypeElements();
		this.pAttribute = new AttributeElements();
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.pSignedInt = new SignedIntElements();
		this.pSignedReal = new SignedRealElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "be.uantwerpen.ansymo.missionspecification.MissionSpecification.REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("be.uantwerpen.ansymo.missionspecification.MissionSpecification".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MissionSpecification:
	//	properties+=Property+;
	public MissionSpecificationElements getMissionSpecificationAccess() {
		return pMissionSpecification;
	}
	
	public ParserRule getMissionSpecificationRule() {
		return getMissionSpecificationAccess().getRule();
	}
	
	//Property:
	//	scope=Scope ',' pattern=Pattern '.'?;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Scope:
	//	{GlobalScope} 'Globally' | {BeforeScope} 'Before' r=Proposition | {AfterScope} 'After' q=Proposition | {BetweenScope}
	//	'Between' q=Proposition ',' 'and' r=Proposition | {AfterUntilScope} 'After' q=Proposition ',' 'until' r=Proposition;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//Pattern:
	//	Occurence | Order;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Occurence:
	//	Universality | Absence | Existence | BoundedExistence;
	public OccurenceElements getOccurenceAccess() {
		return pOccurence;
	}
	
	public ParserRule getOccurenceRule() {
		return getOccurenceAccess().getRule();
	}
	
	//Universality:
	//	'it' 'is' 'always' 'the' 'case' 'that' p=Proposition 'holds'?;
	public UniversalityElements getUniversalityAccess() {
		return pUniversality;
	}
	
	public ParserRule getUniversalityRule() {
		return getUniversalityAccess().getRule();
	}
	
	//// for context assist for consecutive keywords, see https://blogs.itemis.com/en/xtext-hint-content-assist-for-multiple-consecutive-keywords
	//Absence:
	//	'it' 'is' 'never' 'the' 'case' 'that' p=Proposition 'holds'?;
	public AbsenceElements getAbsenceAccess() {
		return pAbsence;
	}
	
	public ParserRule getAbsenceRule() {
		return getAbsenceAccess().getRule();
	}
	
	//// . must be here and not in Property rule for some reason
	//Existence:
	//	p=Proposition 'holds'? 'eventually';
	public ExistenceElements getExistenceAccess() {
		return pExistence;
	}
	
	public ParserRule getExistenceRule() {
		return getExistenceAccess().getRule();
	}
	
	//BoundedExistence:
	//	p=Proposition 'holds'? 'at' 'most' n=INT 'times';
	public BoundedExistenceElements getBoundedExistenceAccess() {
		return pBoundedExistence;
	}
	
	public ParserRule getBoundedExistenceRule() {
		return getBoundedExistenceAccess().getRule();
	}
	
	//Order:
	//	Precedence | Response;
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//Precedence:
	//	'if' p=Proposition 'holds'? ',' 'then' 'it' 'must' 'have' 'been' 'the' 'case' 'that' s=Proposition ('has'
	//	'occurred')? 'beforehand';
	public PrecedenceElements getPrecedenceAccess() {
		return pPrecedence;
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}
	
	//Response:
	//	'if' p=Proposition ('has' 'occurred')? ',' 'then' 'in' 'response' s=Proposition ('eventually' 'holds')?;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//Proposition:
	//	{MockProposition} 'todo' | props+=AtomicProposition ('and' 'also' props+=AtomicProposition)*;
	public PropositionElements getPropositionAccess() {
		return pProposition;
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}
	
	////inst=Instance 'with' cond+=BooleanExpression ('and' cond+=BooleanExpression)* |
	//AtomicProposition:
	//	inst=Instance ('with' cond+=BooleanExpression ('and' cond+=BooleanExpression)*)? (assoc=Association inst2=Instance
	//	('with' cond2+=BooleanExpression ('and' cond2+=BooleanExpression)*)?)?;
	public AtomicPropositionElements getAtomicPropositionAccess() {
		return pAtomicProposition;
	}
	
	public ParserRule getAtomicPropositionRule() {
		return getAtomicPropositionAccess().getRule();
	}
	
	//BooleanExpression:
	//	BinaryExpression | UnaryExpression | {Condition} attr=Attribute;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//BinaryExpression:
	//	{EqualsCondition} attr=Attribute 'as' val=Literal | {LessThanCondition} attr=Attribute 'less' 'than' val=Literal |
	//	{GreaterThanCondition} attr=Attribute 'greater' 'than' val=Literal;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//	{NotCondition} 'not' attr=Attribute;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//Instance:
	//	InstanceRef | InstanceDecl;
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//InstanceDecl:
	//	('a' | 'an') type=Type name=ID?;
	public InstanceDeclElements getInstanceDeclAccess() {
		return pInstanceDecl;
	}
	
	public ParserRule getInstanceDeclRule() {
		return getInstanceDeclAccess().getRule();
	}
	
	//InstanceRef:
	//	ref=[InstanceDecl];
	public InstanceRefElements getInstanceRefAccess() {
		return pInstanceRef;
	}
	
	public ParserRule getInstanceRefRule() {
		return getInstanceRefAccess().getRule();
	}
	
	//Association:
	//	{TasksAssociation} 'that' 'is' 'a' 'task' 'of' | {TeamAssociation} 'that' 'is' 'a' 'team' 'of' | {RobotsAssociation}
	//	'that' 'is' 'in' | {CurrentTaskAssociation} 'currently'? 'doing' | {CoveredTasksAssociation} 'that' 'has' 'scheduled'
	//	| {TodoTasksAssociation} 'that' 'has' 'planned' 'in' 'the' 'future' | {FinishedTasksAssociation} 'that' 'has'
	//	'finished' | {PerformingActionAssociation} 'currently'? 'performing' | {InAssociation} 'currently'? 'in' |
	//	{CurrentPositionAssociation} 'currently'? 'on' | {HomeAssociation} 'with' 'as' 'home' | {TaskAreaAssociation} 'with'
	//	'task' 'area' | {CoveredPointsAssociation} 'which' 'visits' | {TodoPointsAssociation} 'which' 'will' 'visit' 'in'
	//	'the' 'future' | {FinishedPointsAssociation} 'which' 'has' 'visited' | {PointsAssociation} 'with' 'points' |
	//	{InitialPositionAssociation} 'with' 'initial' 'position' | {ReferenceAssociation} 'which' 'references';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Type:
	//	name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Attribute:
	//	name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Literal ArithmeticExpression:
	//	IntLiteral | RealLiteral | StringLiteral | BoolLiteral
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	value=SignedInt;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	value=SignedReal;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//BoolLiteral:
	//	value=('true' | 'false');
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//SignedInt ecore::EInt:
	//	'-'? INT
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}
	
	//SignedReal ecore::EBigDecimal:
	//	'-'? REAL
	public SignedRealElements getSignedRealAccess() {
		return pSignedReal;
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}
	
	//terminal REAL returns ecore::EBigDecimal:
	//	INT? '.' INT;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
