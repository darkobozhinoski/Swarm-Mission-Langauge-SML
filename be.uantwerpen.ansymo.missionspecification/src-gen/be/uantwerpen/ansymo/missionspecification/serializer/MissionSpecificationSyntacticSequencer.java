/*
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.serializer;

import be.uantwerpen.ansymo.missionspecification.services.MissionSpecificationGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MissionSpecificationSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MissionSpecificationGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Absence_HoldsKeyword_7_q;
	protected AbstractElementAlias match_Association_CurrentlyKeyword_3_1_q;
	protected AbstractElementAlias match_Association_CurrentlyKeyword_7_1_q;
	protected AbstractElementAlias match_Association_CurrentlyKeyword_8_1_q;
	protected AbstractElementAlias match_Association_CurrentlyKeyword_9_1_q;
	protected AbstractElementAlias match_BoundedExistence_HoldsKeyword_1_q;
	protected AbstractElementAlias match_Existence_HoldsKeyword_1_q;
	protected AbstractElementAlias match_InstanceDecl_AKeyword_0_0_or_AnKeyword_0_1;
	protected AbstractElementAlias match_Precedence_HoldsKeyword_2_q;
	protected AbstractElementAlias match_Precedence___HasKeyword_13_0_OccurredKeyword_13_1__q;
	protected AbstractElementAlias match_Property_FullStopKeyword_3_q;
	protected AbstractElementAlias match_Response___EventuallyKeyword_8_0_HoldsKeyword_8_1__q;
	protected AbstractElementAlias match_Response___HasKeyword_2_0_OccurredKeyword_2_1__q;
	protected AbstractElementAlias match_Universality_HoldsKeyword_7_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MissionSpecificationGrammarAccess) access;
		match_Absence_HoldsKeyword_7_q = new TokenAlias(false, true, grammarAccess.getAbsenceAccess().getHoldsKeyword_7());
		match_Association_CurrentlyKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getAssociationAccess().getCurrentlyKeyword_3_1());
		match_Association_CurrentlyKeyword_7_1_q = new TokenAlias(false, true, grammarAccess.getAssociationAccess().getCurrentlyKeyword_7_1());
		match_Association_CurrentlyKeyword_8_1_q = new TokenAlias(false, true, grammarAccess.getAssociationAccess().getCurrentlyKeyword_8_1());
		match_Association_CurrentlyKeyword_9_1_q = new TokenAlias(false, true, grammarAccess.getAssociationAccess().getCurrentlyKeyword_9_1());
		match_BoundedExistence_HoldsKeyword_1_q = new TokenAlias(false, true, grammarAccess.getBoundedExistenceAccess().getHoldsKeyword_1());
		match_Existence_HoldsKeyword_1_q = new TokenAlias(false, true, grammarAccess.getExistenceAccess().getHoldsKeyword_1());
		match_InstanceDecl_AKeyword_0_0_or_AnKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInstanceDeclAccess().getAKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getInstanceDeclAccess().getAnKeyword_0_1()));
		match_Precedence_HoldsKeyword_2_q = new TokenAlias(false, true, grammarAccess.getPrecedenceAccess().getHoldsKeyword_2());
		match_Precedence___HasKeyword_13_0_OccurredKeyword_13_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrecedenceAccess().getHasKeyword_13_0()), new TokenAlias(false, false, grammarAccess.getPrecedenceAccess().getOccurredKeyword_13_1()));
		match_Property_FullStopKeyword_3_q = new TokenAlias(false, true, grammarAccess.getPropertyAccess().getFullStopKeyword_3());
		match_Response___EventuallyKeyword_8_0_HoldsKeyword_8_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getResponseAccess().getEventuallyKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getResponseAccess().getHoldsKeyword_8_1()));
		match_Response___HasKeyword_2_0_OccurredKeyword_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getResponseAccess().getHasKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getResponseAccess().getOccurredKeyword_2_1()));
		match_Universality_HoldsKeyword_7_q = new TokenAlias(false, true, grammarAccess.getUniversalityAccess().getHoldsKeyword_7());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Absence_HoldsKeyword_7_q.equals(syntax))
				emit_Absence_HoldsKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association_CurrentlyKeyword_3_1_q.equals(syntax))
				emit_Association_CurrentlyKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association_CurrentlyKeyword_7_1_q.equals(syntax))
				emit_Association_CurrentlyKeyword_7_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association_CurrentlyKeyword_8_1_q.equals(syntax))
				emit_Association_CurrentlyKeyword_8_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Association_CurrentlyKeyword_9_1_q.equals(syntax))
				emit_Association_CurrentlyKeyword_9_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BoundedExistence_HoldsKeyword_1_q.equals(syntax))
				emit_BoundedExistence_HoldsKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Existence_HoldsKeyword_1_q.equals(syntax))
				emit_Existence_HoldsKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InstanceDecl_AKeyword_0_0_or_AnKeyword_0_1.equals(syntax))
				emit_InstanceDecl_AKeyword_0_0_or_AnKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Precedence_HoldsKeyword_2_q.equals(syntax))
				emit_Precedence_HoldsKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Precedence___HasKeyword_13_0_OccurredKeyword_13_1__q.equals(syntax))
				emit_Precedence___HasKeyword_13_0_OccurredKeyword_13_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Property_FullStopKeyword_3_q.equals(syntax))
				emit_Property_FullStopKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Response___EventuallyKeyword_8_0_HoldsKeyword_8_1__q.equals(syntax))
				emit_Response___EventuallyKeyword_8_0_HoldsKeyword_8_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Response___HasKeyword_2_0_OccurredKeyword_2_1__q.equals(syntax))
				emit_Response___HasKeyword_2_0_OccurredKeyword_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Universality_HoldsKeyword_7_q.equals(syntax))
				emit_Universality_HoldsKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Proposition (ambiguity) (rule end)
	 */
	protected void emit_Absence_HoldsKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'currently'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'doing' (rule start)
	 */
	protected void emit_Association_CurrentlyKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'currently'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'performing' (rule start)
	 */
	protected void emit_Association_CurrentlyKeyword_7_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'currently'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'in' (rule start)
	 */
	protected void emit_Association_CurrentlyKeyword_8_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'currently'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'on' (rule start)
	 */
	protected void emit_Association_CurrentlyKeyword_9_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Proposition (ambiguity) 'at' 'most' n=INT
	 */
	protected void emit_BoundedExistence_HoldsKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Proposition (ambiguity) 'eventually' (rule end)
	 */
	protected void emit_Existence_HoldsKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'a' | 'an'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=Type
	 */
	protected void emit_InstanceDecl_AKeyword_0_0_or_AnKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Proposition (ambiguity) ',' 'then' 'it' 'must' 'have' 'been' 'the' 'case' 'that' s=Proposition
	 */
	protected void emit_Precedence_HoldsKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('has' 'occurred')?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=Proposition (ambiguity) 'beforehand' (rule end)
	 */
	protected void emit_Precedence___HasKeyword_13_0_OccurredKeyword_13_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.'?
	 *
	 * This ambiguous syntax occurs at:
	 *     pattern=Pattern (ambiguity) (rule end)
	 */
	protected void emit_Property_FullStopKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('eventually' 'holds')?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=Proposition (ambiguity) (rule end)
	 */
	protected void emit_Response___EventuallyKeyword_8_0_HoldsKeyword_8_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('has' 'occurred')?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Proposition (ambiguity) ',' 'then' 'in' 'response' s=Proposition
	 */
	protected void emit_Response___HasKeyword_2_0_OccurredKeyword_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Proposition (ambiguity) (rule end)
	 */
	protected void emit_Universality_HoldsKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
