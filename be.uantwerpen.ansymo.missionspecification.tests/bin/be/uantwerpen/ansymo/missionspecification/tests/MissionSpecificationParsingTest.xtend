/*
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.util.EObjectContainmentEList
import org.eclipse.emf.common.util.BasicEList
import be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecification

@RunWith(XtextRunner)
@InjectWith(MissionSpecificationInjectorProvider)
class MissionSpecificationParsingTest{
	
	@Inject extension ParseHelper<MissionSpecification>
	@Inject extension ValidationTestHelper
	
	ArrayList<Integer> visited = new ArrayList<Integer>

	@Test 
	def void loadModel() {
		val result = '''Globally, if 
		a Robot r with altitude less than 50 and latitude less than 50, 
		then in response 
		r with altitude greater than 50 and also r with altitude greater than 50'''.parse
		//val result = '''Globally, if todo, then in response a Robot r with altitude less than 50'''.parse
		print_ast(result)
		result.assertNoErrors
	}
	
	@Test 
	def void loadExample1() {
		val result = '''Globally, if 
		a Robot r performing a Spray and also r on a Coordinate p,
		then it must have been the case that 
		r on p and also r performing a ReceiveCoordinates
		beforehand'''.parse
		print_ast(result)
		result.assertNoErrors
	}

	@Test 
	def void loadExample2() {
		val result = '''Globally, it is never the case that 
		a Robot r in an Area with name as "lowflyzone" 
		and also r on a GeoCoordinate with altitude less than 20'''.parse
		print_ast(result)
		result.assertNoErrors
	}
	
	@Test 
	def void loadExample3() {
		val result = '''Globally, it is always the case that 
		a Robot performing a Task 
		and also a Robot on a RelativeCoordinate with x as 100 and y as 200 and z as 10'''.parse
		print_ast(result)
		result.assertNoErrors
	}
	
	@Test 
	def void loadAll3Examples() {
		val result = '''Globally, if 
		a Robot r performing a Spray and also r on a Coordinate p,
		then it must have been the case that 
		r on p and also r performing a ReceiveCoordinates
		beforehand
		
		Globally, it is never the case that 
		a Robot r in an Area with name as "lowflyzone" 
		and also r on a GeoCoordinate with altitude less than 20
				
		Globally, it is always the case that 
		a Robot performing a Task 
		and also a Robot on a RelativeCoordinate with x as 100 and y as 200 and z as 10'''.parse
		print_ast(result)
		result.assertNoErrors
	}
	
	def print_ast(EObject root) {
		visited.clear
		println(root.eClass.name)
		print_ast_element(root, 0)
	}
	
	private def print_ast_element(EObject element, int indent) {
		if (visited.contains(element.hashCode)) {
			return
		}
		visited.add(element.hashCode)
		element.eClass.EAllStructuralFeatures.forEach[f | 
			val feature = element.eGet(f)
			if (feature != null) {
				print(ind(indent+1) + f.name + ": ")
				if (feature instanceof EObjectContainmentEList) {
					println("List<" + f.EType.name + ">")
					(feature as EObjectContainmentEList).forEach[e | 
						print(ind(indent+2) + feature.indexOf(e) + ": " + (e as EObject).class.simpleName.substring(0, (e as EObject).class.simpleName.length-4))
						printObject((e as EObject), indent+2)
					]
				} else if (feature instanceof BasicEList) {
					throw new Exception(f.name + " other type of list: " + feature.class.name)
				} else if (feature instanceof EObject) {
					print(feature.class.simpleName.substring(0, feature.class.simpleName.length-4))
					printObject((feature as EObject), indent+1)
				} else if (feature instanceof String) {
					println(feature.class.simpleName + " = '" + feature + "'")
				} else {
					println(feature.class.simpleName + " = " + feature)
				}
			} else { // filter out null values
				print(ind(indent+1) + f.name + ": ")
				println("null")
			}
		]
		return
	}
	
	private def printObject(EObject element, int indent) {
		if (visited.contains(element.hashCode)) {
			val namelist = element.eClass.EAllStructuralFeatures.filter(e | e.name.equals("name"))
			if (namelist.length == 0) {
				throw new Exception("Reference " + element + " does not have a 'name' attribute")
			}
			println(" -> " + element.eGet(element.eClass.EAllStructuralFeatures.filter(e | e.name.equals("name")).get(0)))
		} else {
			println()
			print_ast_element(element, indent)
		}
		return
	}
	
	private def ind(int indent) {
		var s = ""
		for (var i = 0 ; i < indent ; i++) {
			s += "|   "
		}
		return s
	}

	

}
