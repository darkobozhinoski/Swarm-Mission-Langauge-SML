/**
 * generated by Xtext 2.10.0
 */
package be.uantwerpen.ansymo.missionspecification.tests;

import be.uantwerpen.ansymo.missionspecification.missionSpecification.MissionSpecification;
import be.uantwerpen.ansymo.missionspecification.tests.MissionSpecificationInjectorProvider;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(MissionSpecificationInjectorProvider.class)
@SuppressWarnings("all")
public class MissionSpecificationParsingTest {
  @Inject
  @Extension
  private ParseHelper<MissionSpecification> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  private ArrayList<Integer> visited = new ArrayList<Integer>();
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Globally, if ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot r with altitude less than 50 and latitude less than 50, ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("then in response ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("r with altitude greater than 50 and also r with altitude greater than 50");
      final MissionSpecification result = this._parseHelper.parse(_builder);
      this.print_ast(result);
      this._validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadExample1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Globally, if ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot r performing a Spray and also r on a Coordinate p,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("then it must have been the case that ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("r on p and also r performing a ReceiveCoordinates");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("beforehand");
      final MissionSpecification result = this._parseHelper.parse(_builder);
      this.print_ast(result);
      this._validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadExample2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Globally, it is never the case that ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot r in an Area with name as \"lowflyzone\" ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("and also r on a GeoCoordinate with altitude less than 20");
      final MissionSpecification result = this._parseHelper.parse(_builder);
      this.print_ast(result);
      this._validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadExample3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Globally, it is always the case that ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot performing a Task ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("and also a Robot on a RelativeCoordinate with x as 100 and y as 200 and z as 10");
      final MissionSpecification result = this._parseHelper.parse(_builder);
      this.print_ast(result);
      this._validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadAll3Examples() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Globally, if ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot r performing a Spray and also r on a Coordinate p,");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("then it must have been the case that ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("r on p and also r performing a ReceiveCoordinates");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("beforehand");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Globally, it is never the case that ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot r in an Area with name as \"lowflyzone\" ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("and also r on a GeoCoordinate with altitude less than 20");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Globally, it is always the case that ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a Robot performing a Task ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("and also a Robot on a RelativeCoordinate with x as 100 and y as 200 and z as 10");
      final MissionSpecification result = this._parseHelper.parse(_builder);
      this.print_ast(result);
      this._validationTestHelper.assertNoErrors(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void print_ast(final EObject root) {
    this.visited.clear();
    EClass _eClass = root.eClass();
    String _name = _eClass.getName();
    InputOutput.<String>println(_name);
    this.print_ast_element(root, 0);
  }
  
  private void print_ast_element(final EObject element, final int indent) {
    int _hashCode = element.hashCode();
    boolean _contains = this.visited.contains(Integer.valueOf(_hashCode));
    if (_contains) {
      return;
    }
    int _hashCode_1 = element.hashCode();
    this.visited.add(Integer.valueOf(_hashCode_1));
    EClass _eClass = element.eClass();
    EList<EStructuralFeature> _eAllStructuralFeatures = _eClass.getEAllStructuralFeatures();
    final Consumer<EStructuralFeature> _function = (EStructuralFeature f) -> {
      try {
        final Object feature = element.eGet(f);
        boolean _notEquals = (!Objects.equal(feature, null));
        if (_notEquals) {
          String _ind = this.ind((indent + 1));
          String _name = f.getName();
          String _plus = (_ind + _name);
          String _plus_1 = (_plus + ": ");
          InputOutput.<String>print(_plus_1);
          if ((feature instanceof EObjectContainmentEList)) {
            EClassifier _eType = f.getEType();
            String _name_1 = _eType.getName();
            String _plus_2 = ("List<" + _name_1);
            String _plus_3 = (_plus_2 + ">");
            InputOutput.<String>println(_plus_3);
            final Consumer<Object> _function_1 = (Object e) -> {
              String _ind_1 = this.ind((indent + 2));
              int _indexOf = ((EObjectContainmentEList)feature).indexOf(e);
              String _plus_4 = (_ind_1 + Integer.valueOf(_indexOf));
              String _plus_5 = (_plus_4 + ": ");
              Class<? extends EObject> _class = ((EObject) e).getClass();
              String _simpleName = _class.getSimpleName();
              Class<? extends EObject> _class_1 = ((EObject) e).getClass();
              String _simpleName_1 = _class_1.getSimpleName();
              int _length = _simpleName_1.length();
              int _minus = (_length - 4);
              String _substring = _simpleName.substring(0, _minus);
              String _plus_6 = (_plus_5 + _substring);
              InputOutput.<String>print(_plus_6);
              this.printObject(((EObject) e), (indent + 2));
            };
            ((EObjectContainmentEList) feature).forEach(_function_1);
          } else {
            if ((feature instanceof BasicEList)) {
              String _name_2 = f.getName();
              String _plus_4 = (_name_2 + " other type of list: ");
              Class _class = ((BasicEList)feature).getClass();
              String _name_3 = _class.getName();
              String _plus_5 = (_plus_4 + _name_3);
              throw new Exception(_plus_5);
            } else {
              if ((feature instanceof EObject)) {
                Class<? extends EObject> _class_1 = ((EObject)feature).getClass();
                String _simpleName = _class_1.getSimpleName();
                Class<? extends EObject> _class_2 = ((EObject)feature).getClass();
                String _simpleName_1 = _class_2.getSimpleName();
                int _length = _simpleName_1.length();
                int _minus = (_length - 4);
                String _substring = _simpleName.substring(0, _minus);
                InputOutput.<String>print(_substring);
                this.printObject(((EObject) feature), (indent + 1));
              } else {
                if ((feature instanceof String)) {
                  Class<? extends String> _class_3 = ((String)feature).getClass();
                  String _simpleName_2 = _class_3.getSimpleName();
                  String _plus_6 = (_simpleName_2 + " = \'");
                  String _plus_7 = (_plus_6 + ((String)feature));
                  String _plus_8 = (_plus_7 + "\'");
                  InputOutput.<String>println(_plus_8);
                } else {
                  Class<?> _class_4 = feature.getClass();
                  String _simpleName_3 = _class_4.getSimpleName();
                  String _plus_9 = (_simpleName_3 + " = ");
                  String _plus_10 = (_plus_9 + feature);
                  InputOutput.<String>println(_plus_10);
                }
              }
            }
          }
        } else {
          String _ind_1 = this.ind((indent + 1));
          String _name_4 = f.getName();
          String _plus_11 = (_ind_1 + _name_4);
          String _plus_12 = (_plus_11 + ": ");
          InputOutput.<String>print(_plus_12);
          InputOutput.<String>println("null");
        }
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    _eAllStructuralFeatures.forEach(_function);
    return;
  }
  
  private void printObject(final EObject element, final int indent) {
    try {
      int _hashCode = element.hashCode();
      boolean _contains = this.visited.contains(Integer.valueOf(_hashCode));
      if (_contains) {
        EClass _eClass = element.eClass();
        EList<EStructuralFeature> _eAllStructuralFeatures = _eClass.getEAllStructuralFeatures();
        final Function1<EStructuralFeature, Boolean> _function = (EStructuralFeature e) -> {
          String _name = e.getName();
          return Boolean.valueOf(_name.equals("name"));
        };
        final Iterable<EStructuralFeature> namelist = IterableExtensions.<EStructuralFeature>filter(_eAllStructuralFeatures, _function);
        int _length = ((Object[])Conversions.unwrapArray(namelist, Object.class)).length;
        boolean _equals = (_length == 0);
        if (_equals) {
          throw new Exception((("Reference " + element) + " does not have a \'name\' attribute"));
        }
        EClass _eClass_1 = element.eClass();
        EList<EStructuralFeature> _eAllStructuralFeatures_1 = _eClass_1.getEAllStructuralFeatures();
        final Function1<EStructuralFeature, Boolean> _function_1 = (EStructuralFeature e) -> {
          String _name = e.getName();
          return Boolean.valueOf(_name.equals("name"));
        };
        Iterable<EStructuralFeature> _filter = IterableExtensions.<EStructuralFeature>filter(_eAllStructuralFeatures_1, _function_1);
        EStructuralFeature _get = ((EStructuralFeature[])Conversions.unwrapArray(_filter, EStructuralFeature.class))[0];
        Object _eGet = element.eGet(_get);
        String _plus = (" -> " + _eGet);
        InputOutput.<String>println(_plus);
      } else {
        InputOutput.println();
        this.print_ast_element(element, indent);
      }
      return;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private String ind(final int indent) {
    String s = "";
    for (int i = 0; (i < indent); i++) {
      String _s = s;
      s = (_s + "|   ");
    }
    return s;
  }
}
